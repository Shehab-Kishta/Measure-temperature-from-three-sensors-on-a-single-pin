
ROBOT_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  000037ec  00003880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080022a  0080022a  000039aa  2**0
                  ALLOC
  3 .stab         00002c10  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f34  00000000  00000000  000065bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b013  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f7 e3       	ldi	r31, 0x37	; 55
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	aa e2       	ldi	r26, 0x2A	; 42
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 32       	cpi	r26, 0x2B	; 43
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <main>
      9e:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a8 e1       	ldi	r26, 0x18	; 24
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	88 e1       	ldi	r24, 0x18	; 24
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__>

00000646 <__divsf3>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__prologue_saves__+0x10>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	b9 e0       	ldi	r27, 0x09	; 9
     664:	eb 2e       	mov	r14, r27
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	22 30       	cpi	r18, 0x02	; 2
     68a:	08 f4       	brcc	.+2      	; 0x68e <__divsf3+0x48>
     68c:	7e c0       	rjmp	.+252    	; 0x78a <__divsf3+0x144>
     68e:	39 89       	ldd	r19, Y+17	; 0x11
     690:	32 30       	cpi	r19, 0x02	; 2
     692:	10 f4       	brcc	.+4      	; 0x698 <__divsf3+0x52>
     694:	b8 01       	movw	r22, r16
     696:	7c c0       	rjmp	.+248    	; 0x790 <__divsf3+0x14a>
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	9a 89       	ldd	r25, Y+18	; 0x12
     69c:	89 27       	eor	r24, r25
     69e:	8a 87       	std	Y+10, r24	; 0x0a
     6a0:	24 30       	cpi	r18, 0x04	; 4
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <__divsf3+0x62>
     6a4:	22 30       	cpi	r18, 0x02	; 2
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <__divsf3+0x6e>
     6a8:	23 17       	cp	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__divsf3+0x68>
     6ac:	6e c0       	rjmp	.+220    	; 0x78a <__divsf3+0x144>
     6ae:	68 e1       	ldi	r22, 0x18	; 24
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	6e c0       	rjmp	.+220    	; 0x790 <__divsf3+0x14a>
     6b4:	34 30       	cpi	r19, 0x04	; 4
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <__divsf3+0x80>
     6b8:	1d 86       	std	Y+13, r1	; 0x0d
     6ba:	1e 86       	std	Y+14, r1	; 0x0e
     6bc:	1f 86       	std	Y+15, r1	; 0x0f
     6be:	18 8a       	std	Y+16, r1	; 0x10
     6c0:	1c 86       	std	Y+12, r1	; 0x0c
     6c2:	1b 86       	std	Y+11, r1	; 0x0b
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divsf3+0x88>
     6c6:	32 30       	cpi	r19, 0x02	; 2
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <__divsf3+0x8c>
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	b7 01       	movw	r22, r14
     6d0:	5f c0       	rjmp	.+190    	; 0x790 <__divsf3+0x14a>
     6d2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	3c 87       	std	Y+12, r19	; 0x0c
     6e0:	2b 87       	std	Y+11, r18	; 0x0b
     6e2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6e4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6e6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6e8:	18 89       	ldd	r17, Y+16	; 0x10
     6ea:	ad 88       	ldd	r10, Y+21	; 0x15
     6ec:	be 88       	ldd	r11, Y+22	; 0x16
     6ee:	cf 88       	ldd	r12, Y+23	; 0x17
     6f0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6f2:	ea 14       	cp	r14, r10
     6f4:	fb 04       	cpc	r15, r11
     6f6:	0c 05       	cpc	r16, r12
     6f8:	1d 05       	cpc	r17, r13
     6fa:	40 f4       	brcc	.+16     	; 0x70c <__divsf3+0xc6>
     6fc:	ee 0c       	add	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	00 1f       	adc	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
     708:	3c 87       	std	Y+12, r19	; 0x0c
     70a:	2b 87       	std	Y+11, r18	; 0x0b
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	ea 14       	cp	r14, r10
     722:	fb 04       	cpc	r15, r11
     724:	0c 05       	cpc	r16, r12
     726:	1d 05       	cpc	r17, r13
     728:	40 f0       	brcs	.+16     	; 0x73a <__divsf3+0xf4>
     72a:	28 2b       	or	r18, r24
     72c:	39 2b       	or	r19, r25
     72e:	4a 2b       	or	r20, r26
     730:	5b 2b       	or	r21, r27
     732:	ea 18       	sub	r14, r10
     734:	fb 08       	sbc	r15, r11
     736:	0c 09       	sbc	r16, r12
     738:	1d 09       	sbc	r17, r13
     73a:	b6 95       	lsr	r27
     73c:	a7 95       	ror	r26
     73e:	97 95       	ror	r25
     740:	87 95       	ror	r24
     742:	ee 0c       	add	r14, r14
     744:	ff 1c       	adc	r15, r15
     746:	00 1f       	adc	r16, r16
     748:	11 1f       	adc	r17, r17
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	6f 31       	cpi	r22, 0x1F	; 31
     750:	71 05       	cpc	r23, r1
     752:	31 f7       	brne	.-52     	; 0x720 <__divsf3+0xda>
     754:	da 01       	movw	r26, r20
     756:	c9 01       	movw	r24, r18
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	a0 70       	andi	r26, 0x00	; 0
     75e:	b0 70       	andi	r27, 0x00	; 0
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	61 f4       	brne	.+24     	; 0x782 <__divsf3+0x13c>
     76a:	27 fd       	sbrc	r18, 7
     76c:	0a c0       	rjmp	.+20     	; 0x782 <__divsf3+0x13c>
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	01 05       	cpc	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	29 f0       	breq	.+10     	; 0x782 <__divsf3+0x13c>
     778:	20 5c       	subi	r18, 0xC0	; 192
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	4f 4f       	sbci	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	20 78       	andi	r18, 0x80	; 128
     782:	2d 87       	std	Y+13, r18	; 0x0d
     784:	3e 87       	std	Y+14, r19	; 0x0e
     786:	4f 87       	std	Y+15, r20	; 0x0f
     788:	58 8b       	std	Y+16, r21	; 0x10
     78a:	be 01       	movw	r22, r28
     78c:	67 5f       	subi	r22, 0xF7	; 247
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	cb 01       	movw	r24, r22
     792:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__pack_f>
     796:	68 96       	adiw	r28, 0x18	; 24
     798:	ea e0       	ldi	r30, 0x0A	; 10
     79a:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <__epilogue_restores__+0x10>

0000079e <__gtsf2>:
     79e:	a8 e1       	ldi	r26, 0x18	; 24
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e5 ed       	ldi	r30, 0xD5	; 213
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__+0x18>
     7aa:	69 83       	std	Y+1, r22	; 0x01
     7ac:	7a 83       	std	Y+2, r23	; 0x02
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	2d 83       	std	Y+5, r18	; 0x05
     7b4:	3e 83       	std	Y+6, r19	; 0x06
     7b6:	4f 83       	std	Y+7, r20	; 0x07
     7b8:	58 87       	std	Y+8, r21	; 0x08
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	e8 2e       	mov	r14, r24
     7be:	f1 2c       	mov	r15, r1
     7c0:	ec 0e       	add	r14, r28
     7c2:	fd 1e       	adc	r15, r29
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	b7 01       	movw	r22, r14
     7ca:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     7ce:	8e 01       	movw	r16, r28
     7d0:	0f 5e       	subi	r16, 0xEF	; 239
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	ce 01       	movw	r24, r28
     7d6:	05 96       	adiw	r24, 0x05	; 5
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__gtsf2+0x56>
     7e4:	89 89       	ldd	r24, Y+17	; 0x11
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	28 f0       	brcs	.+10     	; 0x7f4 <__gtsf2+0x56>
     7ea:	c7 01       	movw	r24, r14
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fpcmp_parts_f>
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <__gtsf2+0x58>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	68 96       	adiw	r28, 0x18	; 24
     7f8:	e6 e0       	ldi	r30, 0x06	; 6
     7fa:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__+0x18>

000007fe <__gesf2>:
     7fe:	a8 e1       	ldi	r26, 0x18	; 24
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__+0x18>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	e8 2e       	mov	r14, r24
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     82e:	8e 01       	movw	r16, r28
     830:	0f 5e       	subi	r16, 0xEF	; 239
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     83e:	89 85       	ldd	r24, Y+9	; 0x09
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	40 f0       	brcs	.+16     	; 0x854 <__gesf2+0x56>
     844:	89 89       	ldd	r24, Y+17	; 0x11
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	28 f0       	brcs	.+10     	; 0x854 <__gesf2+0x56>
     84a:	c7 01       	movw	r24, r14
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fpcmp_parts_f>
     852:	01 c0       	rjmp	.+2      	; 0x856 <__gesf2+0x58>
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	68 96       	adiw	r28, 0x18	; 24
     858:	e6 e0       	ldi	r30, 0x06	; 6
     85a:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__+0x18>

0000085e <__ltsf2>:
     85e:	a8 e1       	ldi	r26, 0x18	; 24
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__+0x18>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	2d 83       	std	Y+5, r18	; 0x05
     874:	3e 83       	std	Y+6, r19	; 0x06
     876:	4f 83       	std	Y+7, r20	; 0x07
     878:	58 87       	std	Y+8, r21	; 0x08
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	e8 2e       	mov	r14, r24
     87e:	f1 2c       	mov	r15, r1
     880:	ec 0e       	add	r14, r28
     882:	fd 1e       	adc	r15, r29
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	b7 01       	movw	r22, r14
     88a:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     88e:	8e 01       	movw	r16, r28
     890:	0f 5e       	subi	r16, 0xEF	; 239
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	05 96       	adiw	r24, 0x05	; 5
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	40 f0       	brcs	.+16     	; 0x8b4 <__ltsf2+0x56>
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <__ltsf2+0x56>
     8aa:	c7 01       	movw	r24, r14
     8ac:	b8 01       	movw	r22, r16
     8ae:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fpcmp_parts_f>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__ltsf2+0x58>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	68 96       	adiw	r28, 0x18	; 24
     8b8:	e6 e0       	ldi	r30, 0x06	; 6
     8ba:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__+0x18>

000008be <__fixsfsi>:
     8be:	ac e0       	ldi	r26, 0x0C	; 12
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e5 e6       	ldi	r30, 0x65	; 101
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__prologue_saves__+0x20>
     8ca:	69 83       	std	Y+1, r22	; 0x01
     8cc:	7a 83       	std	Y+2, r23	; 0x02
     8ce:	8b 83       	std	Y+3, r24	; 0x03
     8d0:	9c 83       	std	Y+4, r25	; 0x04
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	be 01       	movw	r22, r28
     8d8:	6b 5f       	subi	r22, 0xFB	; 251
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	0e 94 50 06 	call	0xca0	; 0xca0 <__unpack_f>
     8e0:	8d 81       	ldd	r24, Y+5	; 0x05
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	61 f1       	breq	.+88     	; 0x93e <__stack+0x3f>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	50 f1       	brcs	.+84     	; 0x93e <__stack+0x3f>
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__fixsfsi+0x38>
     8ee:	8e 81       	ldd	r24, Y+6	; 0x06
     8f0:	88 23       	and	r24, r24
     8f2:	51 f1       	breq	.+84     	; 0x948 <__stack+0x49>
     8f4:	2e c0       	rjmp	.+92     	; 0x952 <__stack+0x53>
     8f6:	2f 81       	ldd	r18, Y+7	; 0x07
     8f8:	38 85       	ldd	r19, Y+8	; 0x08
     8fa:	37 fd       	sbrc	r19, 7
     8fc:	20 c0       	rjmp	.+64     	; 0x93e <__stack+0x3f>
     8fe:	6e 81       	ldd	r22, Y+6	; 0x06
     900:	2f 31       	cpi	r18, 0x1F	; 31
     902:	31 05       	cpc	r19, r1
     904:	1c f0       	brlt	.+6      	; 0x90c <__stack+0xd>
     906:	66 23       	and	r22, r22
     908:	f9 f0       	breq	.+62     	; 0x948 <__stack+0x49>
     90a:	23 c0       	rjmp	.+70     	; 0x952 <__stack+0x53>
     90c:	8e e1       	ldi	r24, 0x1E	; 30
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	82 1b       	sub	r24, r18
     912:	93 0b       	sbc	r25, r19
     914:	29 85       	ldd	r18, Y+9	; 0x09
     916:	3a 85       	ldd	r19, Y+10	; 0x0a
     918:	4b 85       	ldd	r20, Y+11	; 0x0b
     91a:	5c 85       	ldd	r21, Y+12	; 0x0c
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
     91e:	56 95       	lsr	r21
     920:	47 95       	ror	r20
     922:	37 95       	ror	r19
     924:	27 95       	ror	r18
     926:	8a 95       	dec	r24
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0x1f>
     92a:	66 23       	and	r22, r22
     92c:	b1 f0       	breq	.+44     	; 0x95a <__stack+0x5b>
     92e:	50 95       	com	r21
     930:	40 95       	com	r20
     932:	30 95       	com	r19
     934:	21 95       	neg	r18
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	4f 4f       	sbci	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	0e c0       	rjmp	.+28     	; 0x95a <__stack+0x5b>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	4f ef       	ldi	r20, 0xFF	; 255
     94e:	5f e7       	ldi	r21, 0x7F	; 127
     950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e8       	ldi	r21, 0x80	; 128
     95a:	b9 01       	movw	r22, r18
     95c:	ca 01       	movw	r24, r20
     95e:	2c 96       	adiw	r28, 0x0c	; 12
     960:	e2 e0       	ldi	r30, 0x02	; 2
     962:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <__epilogue_restores__+0x20>

00000966 <__floatunsisf>:
     966:	a8 e0       	ldi	r26, 0x08	; 8
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__prologue_saves__+0x10>
     972:	7b 01       	movw	r14, r22
     974:	8c 01       	movw	r16, r24
     976:	61 15       	cp	r22, r1
     978:	71 05       	cpc	r23, r1
     97a:	81 05       	cpc	r24, r1
     97c:	91 05       	cpc	r25, r1
     97e:	19 f4       	brne	.+6      	; 0x986 <__floatunsisf+0x20>
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	60 c0       	rjmp	.+192    	; 0xa46 <__floatunsisf+0xe0>
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	8e e1       	ldi	r24, 0x1E	; 30
     98c:	c8 2e       	mov	r12, r24
     98e:	d1 2c       	mov	r13, r1
     990:	dc 82       	std	Y+4, r13	; 0x04
     992:	cb 82       	std	Y+3, r12	; 0x03
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 01       	movw	r24, r16
     99e:	b7 01       	movw	r22, r14
     9a0:	0e 94 2c 05 	call	0xa58	; 0xa58 <__clzsi2>
     9a4:	fc 01       	movw	r30, r24
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	f7 ff       	sbrs	r31, 7
     9aa:	3b c0       	rjmp	.+118    	; 0xa22 <__floatunsisf+0xbc>
     9ac:	22 27       	eor	r18, r18
     9ae:	33 27       	eor	r19, r19
     9b0:	2e 1b       	sub	r18, r30
     9b2:	3f 0b       	sbc	r19, r31
     9b4:	57 01       	movw	r10, r14
     9b6:	68 01       	movw	r12, r16
     9b8:	02 2e       	mov	r0, r18
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <__floatunsisf+0x5e>
     9bc:	d6 94       	lsr	r13
     9be:	c7 94       	ror	r12
     9c0:	b7 94       	ror	r11
     9c2:	a7 94       	ror	r10
     9c4:	0a 94       	dec	r0
     9c6:	d2 f7       	brpl	.-12     	; 0x9bc <__floatunsisf+0x56>
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__floatunsisf+0x7c>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	aa 1f       	adc	r26, r26
     9e0:	bb 1f       	adc	r27, r27
     9e2:	2a 95       	dec	r18
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__floatunsisf+0x74>
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	a1 09       	sbc	r26, r1
     9ea:	b1 09       	sbc	r27, r1
     9ec:	8e 21       	and	r24, r14
     9ee:	9f 21       	and	r25, r15
     9f0:	a0 23       	and	r26, r16
     9f2:	b1 23       	and	r27, r17
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	21 f0       	breq	.+8      	; 0xa04 <__floatunsisf+0x9e>
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	4a 29       	or	r20, r10
     a06:	5b 29       	or	r21, r11
     a08:	6c 29       	or	r22, r12
     a0a:	7d 29       	or	r23, r13
     a0c:	4d 83       	std	Y+5, r20	; 0x05
     a0e:	5e 83       	std	Y+6, r21	; 0x06
     a10:	6f 83       	std	Y+7, r22	; 0x07
     a12:	78 87       	std	Y+8, r23	; 0x08
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	8e 1b       	sub	r24, r30
     a1a:	9f 0b       	sbc	r25, r31
     a1c:	9c 83       	std	Y+4, r25	; 0x04
     a1e:	8b 83       	std	Y+3, r24	; 0x03
     a20:	12 c0       	rjmp	.+36     	; 0xa46 <__floatunsisf+0xe0>
     a22:	30 97       	sbiw	r30, 0x00	; 0
     a24:	81 f0       	breq	.+32     	; 0xa46 <__floatunsisf+0xe0>
     a26:	0e 2e       	mov	r0, r30
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__floatunsisf+0xcc>
     a2a:	ee 0c       	add	r14, r14
     a2c:	ff 1c       	adc	r15, r15
     a2e:	00 1f       	adc	r16, r16
     a30:	11 1f       	adc	r17, r17
     a32:	0a 94       	dec	r0
     a34:	d2 f7       	brpl	.-12     	; 0xa2a <__floatunsisf+0xc4>
     a36:	ed 82       	std	Y+5, r14	; 0x05
     a38:	fe 82       	std	Y+6, r15	; 0x06
     a3a:	0f 83       	std	Y+7, r16	; 0x07
     a3c:	18 87       	std	Y+8, r17	; 0x08
     a3e:	ce 1a       	sub	r12, r30
     a40:	df 0a       	sbc	r13, r31
     a42:	dc 82       	std	Y+4, r13	; 0x04
     a44:	cb 82       	std	Y+3, r12	; 0x03
     a46:	1a 82       	std	Y+2, r1	; 0x02
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__pack_f>
     a50:	28 96       	adiw	r28, 0x08	; 8
     a52:	ea e0       	ldi	r30, 0x0A	; 10
     a54:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <__epilogue_restores__+0x10>

00000a58 <__clzsi2>:
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	7b 01       	movw	r14, r22
     a62:	8c 01       	movw	r16, r24
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	e8 16       	cp	r14, r24
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	f8 06       	cpc	r15, r24
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	08 07       	cpc	r16, r24
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	18 07       	cpc	r17, r24
     a74:	88 f4       	brcc	.+34     	; 0xa98 <__clzsi2+0x40>
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	e8 16       	cp	r14, r24
     a7a:	f1 04       	cpc	r15, r1
     a7c:	01 05       	cpc	r16, r1
     a7e:	11 05       	cpc	r17, r1
     a80:	31 f0       	breq	.+12     	; 0xa8e <__clzsi2+0x36>
     a82:	28 f0       	brcs	.+10     	; 0xa8e <__clzsi2+0x36>
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	17 c0       	rjmp	.+46     	; 0xabc <__clzsi2+0x64>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	12 c0       	rjmp	.+36     	; 0xabc <__clzsi2+0x64>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	e8 16       	cp	r14, r24
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	f8 06       	cpc	r15, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	08 07       	cpc	r16, r24
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	18 07       	cpc	r17, r24
     aa8:	28 f0       	brcs	.+10     	; 0xab4 <__clzsi2+0x5c>
     aaa:	88 e1       	ldi	r24, 0x18	; 24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__clzsi2+0x64>
     ab4:	80 e1       	ldi	r24, 0x10	; 16
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	20 e2       	ldi	r18, 0x20	; 32
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	28 1b       	sub	r18, r24
     ac6:	39 0b       	sbc	r19, r25
     ac8:	4a 0b       	sbc	r20, r26
     aca:	5b 0b       	sbc	r21, r27
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__clzsi2+0x7e>
     ace:	16 95       	lsr	r17
     ad0:	07 95       	ror	r16
     ad2:	f7 94       	ror	r15
     ad4:	e7 94       	ror	r14
     ad6:	8a 95       	dec	r24
     ad8:	d2 f7       	brpl	.-12     	; 0xace <__clzsi2+0x76>
     ada:	f7 01       	movw	r30, r14
     adc:	e0 5e       	subi	r30, 0xE0	; 224
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	80 81       	ld	r24, Z
     ae2:	28 1b       	sub	r18, r24
     ae4:	31 09       	sbc	r19, r1
     ae6:	41 09       	sbc	r20, r1
     ae8:	51 09       	sbc	r21, r1
     aea:	c9 01       	movw	r24, r18
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	08 95       	ret

00000af6 <__pack_f>:
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	fc 01       	movw	r30, r24
     b02:	e4 80       	ldd	r14, Z+4	; 0x04
     b04:	f5 80       	ldd	r15, Z+5	; 0x05
     b06:	06 81       	ldd	r16, Z+6	; 0x06
     b08:	17 81       	ldd	r17, Z+7	; 0x07
     b0a:	d1 80       	ldd	r13, Z+1	; 0x01
     b0c:	80 81       	ld	r24, Z
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	48 f4       	brcc	.+18     	; 0xb24 <__pack_f+0x2e>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e1       	ldi	r26, 0x10	; 16
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e8 2a       	or	r14, r24
     b1c:	f9 2a       	or	r15, r25
     b1e:	0a 2b       	or	r16, r26
     b20:	1b 2b       	or	r17, r27
     b22:	a5 c0       	rjmp	.+330    	; 0xc6e <__pack_f+0x178>
     b24:	84 30       	cpi	r24, 0x04	; 4
     b26:	09 f4       	brne	.+2      	; 0xb2a <__pack_f+0x34>
     b28:	9f c0       	rjmp	.+318    	; 0xc68 <__pack_f+0x172>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	21 f4       	brne	.+8      	; 0xb36 <__pack_f+0x40>
     b2e:	ee 24       	eor	r14, r14
     b30:	ff 24       	eor	r15, r15
     b32:	87 01       	movw	r16, r14
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__pack_f+0x4a>
     b36:	e1 14       	cp	r14, r1
     b38:	f1 04       	cpc	r15, r1
     b3a:	01 05       	cpc	r16, r1
     b3c:	11 05       	cpc	r17, r1
     b3e:	19 f4       	brne	.+6      	; 0xb46 <__pack_f+0x50>
     b40:	e0 e0       	ldi	r30, 0x00	; 0
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	96 c0       	rjmp	.+300    	; 0xc72 <__pack_f+0x17c>
     b46:	62 81       	ldd	r22, Z+2	; 0x02
     b48:	73 81       	ldd	r23, Z+3	; 0x03
     b4a:	9f ef       	ldi	r25, 0xFF	; 255
     b4c:	62 38       	cpi	r22, 0x82	; 130
     b4e:	79 07       	cpc	r23, r25
     b50:	0c f0       	brlt	.+2      	; 0xb54 <__pack_f+0x5e>
     b52:	5b c0       	rjmp	.+182    	; 0xc0a <__pack_f+0x114>
     b54:	22 e8       	ldi	r18, 0x82	; 130
     b56:	3f ef       	ldi	r19, 0xFF	; 255
     b58:	26 1b       	sub	r18, r22
     b5a:	37 0b       	sbc	r19, r23
     b5c:	2a 31       	cpi	r18, 0x1A	; 26
     b5e:	31 05       	cpc	r19, r1
     b60:	2c f0       	brlt	.+10     	; 0xb6c <__pack_f+0x76>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	2a c0       	rjmp	.+84     	; 0xbc0 <__pack_f+0xca>
     b6c:	b8 01       	movw	r22, r16
     b6e:	a7 01       	movw	r20, r14
     b70:	02 2e       	mov	r0, r18
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <__pack_f+0x86>
     b74:	76 95       	lsr	r23
     b76:	67 95       	ror	r22
     b78:	57 95       	ror	r21
     b7a:	47 95       	ror	r20
     b7c:	0a 94       	dec	r0
     b7e:	d2 f7       	brpl	.-12     	; 0xb74 <__pack_f+0x7e>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x9c>
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	aa 1f       	adc	r26, r26
     b90:	bb 1f       	adc	r27, r27
     b92:	2a 95       	dec	r18
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x94>
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	a1 09       	sbc	r26, r1
     b9a:	b1 09       	sbc	r27, r1
     b9c:	8e 21       	and	r24, r14
     b9e:	9f 21       	and	r25, r15
     ba0:	a0 23       	and	r26, r16
     ba2:	b1 23       	and	r27, r17
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	a1 05       	cpc	r26, r1
     ba8:	b1 05       	cpc	r27, r1
     baa:	21 f0       	breq	.+8      	; 0xbb4 <__pack_f+0xbe>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	9a 01       	movw	r18, r20
     bb6:	ab 01       	movw	r20, r22
     bb8:	28 2b       	or	r18, r24
     bba:	39 2b       	or	r19, r25
     bbc:	4a 2b       	or	r20, r26
     bbe:	5b 2b       	or	r21, r27
     bc0:	da 01       	movw	r26, r20
     bc2:	c9 01       	movw	r24, r18
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	90 70       	andi	r25, 0x00	; 0
     bc8:	a0 70       	andi	r26, 0x00	; 0
     bca:	b0 70       	andi	r27, 0x00	; 0
     bcc:	80 34       	cpi	r24, 0x40	; 64
     bce:	91 05       	cpc	r25, r1
     bd0:	a1 05       	cpc	r26, r1
     bd2:	b1 05       	cpc	r27, r1
     bd4:	39 f4       	brne	.+14     	; 0xbe4 <__pack_f+0xee>
     bd6:	27 ff       	sbrs	r18, 7
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <__pack_f+0xf6>
     bda:	20 5c       	subi	r18, 0xC0	; 192
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	4f 4f       	sbci	r20, 0xFF	; 255
     be0:	5f 4f       	sbci	r21, 0xFF	; 255
     be2:	04 c0       	rjmp	.+8      	; 0xbec <__pack_f+0xf6>
     be4:	21 5c       	subi	r18, 0xC1	; 193
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	4f 4f       	sbci	r20, 0xFF	; 255
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	20 30       	cpi	r18, 0x00	; 0
     bf2:	a0 e0       	ldi	r26, 0x00	; 0
     bf4:	3a 07       	cpc	r19, r26
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	4a 07       	cpc	r20, r26
     bfa:	a0 e4       	ldi	r26, 0x40	; 64
     bfc:	5a 07       	cpc	r21, r26
     bfe:	10 f0       	brcs	.+4      	; 0xc04 <__pack_f+0x10e>
     c00:	e1 e0       	ldi	r30, 0x01	; 1
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	79 01       	movw	r14, r18
     c06:	8a 01       	movw	r16, r20
     c08:	27 c0       	rjmp	.+78     	; 0xc58 <__pack_f+0x162>
     c0a:	60 38       	cpi	r22, 0x80	; 128
     c0c:	71 05       	cpc	r23, r1
     c0e:	64 f5       	brge	.+88     	; 0xc68 <__pack_f+0x172>
     c10:	fb 01       	movw	r30, r22
     c12:	e1 58       	subi	r30, 0x81	; 129
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	d8 01       	movw	r26, r16
     c18:	c7 01       	movw	r24, r14
     c1a:	8f 77       	andi	r24, 0x7F	; 127
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	a0 70       	andi	r26, 0x00	; 0
     c20:	b0 70       	andi	r27, 0x00	; 0
     c22:	80 34       	cpi	r24, 0x40	; 64
     c24:	91 05       	cpc	r25, r1
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	39 f4       	brne	.+14     	; 0xc3a <__pack_f+0x144>
     c2c:	e7 fe       	sbrs	r14, 7
     c2e:	0d c0       	rjmp	.+26     	; 0xc4a <__pack_f+0x154>
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__pack_f+0x14c>
     c3a:	8f e3       	ldi	r24, 0x3F	; 63
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e8 0e       	add	r14, r24
     c44:	f9 1e       	adc	r15, r25
     c46:	0a 1f       	adc	r16, r26
     c48:	1b 1f       	adc	r17, r27
     c4a:	17 ff       	sbrs	r17, 7
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <__pack_f+0x162>
     c4e:	16 95       	lsr	r17
     c50:	07 95       	ror	r16
     c52:	f7 94       	ror	r15
     c54:	e7 94       	ror	r14
     c56:	31 96       	adiw	r30, 0x01	; 1
     c58:	87 e0       	ldi	r24, 0x07	; 7
     c5a:	16 95       	lsr	r17
     c5c:	07 95       	ror	r16
     c5e:	f7 94       	ror	r15
     c60:	e7 94       	ror	r14
     c62:	8a 95       	dec	r24
     c64:	d1 f7       	brne	.-12     	; 0xc5a <__pack_f+0x164>
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <__pack_f+0x17c>
     c68:	ee 24       	eor	r14, r14
     c6a:	ff 24       	eor	r15, r15
     c6c:	87 01       	movw	r16, r14
     c6e:	ef ef       	ldi	r30, 0xFF	; 255
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	6e 2f       	mov	r22, r30
     c74:	67 95       	ror	r22
     c76:	66 27       	eor	r22, r22
     c78:	67 95       	ror	r22
     c7a:	90 2f       	mov	r25, r16
     c7c:	9f 77       	andi	r25, 0x7F	; 127
     c7e:	d7 94       	ror	r13
     c80:	dd 24       	eor	r13, r13
     c82:	d7 94       	ror	r13
     c84:	8e 2f       	mov	r24, r30
     c86:	86 95       	lsr	r24
     c88:	49 2f       	mov	r20, r25
     c8a:	46 2b       	or	r20, r22
     c8c:	58 2f       	mov	r21, r24
     c8e:	5d 29       	or	r21, r13
     c90:	b7 01       	movw	r22, r14
     c92:	ca 01       	movw	r24, r20
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	08 95       	ret

00000ca0 <__unpack_f>:
     ca0:	fc 01       	movw	r30, r24
     ca2:	db 01       	movw	r26, r22
     ca4:	40 81       	ld	r20, Z
     ca6:	51 81       	ldd	r21, Z+1	; 0x01
     ca8:	22 81       	ldd	r18, Z+2	; 0x02
     caa:	62 2f       	mov	r22, r18
     cac:	6f 77       	andi	r22, 0x7F	; 127
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	22 1f       	adc	r18, r18
     cb2:	22 27       	eor	r18, r18
     cb4:	22 1f       	adc	r18, r18
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	89 2f       	mov	r24, r25
     cba:	88 0f       	add	r24, r24
     cbc:	82 2b       	or	r24, r18
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	99 1f       	adc	r25, r25
     cc4:	99 27       	eor	r25, r25
     cc6:	99 1f       	adc	r25, r25
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	9c 93       	st	X, r25
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	21 15       	cp	r18, r1
     cd0:	31 05       	cpc	r19, r1
     cd2:	a9 f5       	brne	.+106    	; 0xd3e <__unpack_f+0x9e>
     cd4:	41 15       	cp	r20, r1
     cd6:	51 05       	cpc	r21, r1
     cd8:	61 05       	cpc	r22, r1
     cda:	71 05       	cpc	r23, r1
     cdc:	11 f4       	brne	.+4      	; 0xce2 <__unpack_f+0x42>
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	37 c0       	rjmp	.+110    	; 0xd50 <__unpack_f+0xb0>
     ce2:	82 e8       	ldi	r24, 0x82	; 130
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	13 96       	adiw	r26, 0x03	; 3
     ce8:	9c 93       	st	X, r25
     cea:	8e 93       	st	-X, r24
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	9a 01       	movw	r18, r20
     cf0:	ab 01       	movw	r20, r22
     cf2:	67 e0       	ldi	r22, 0x07	; 7
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	44 1f       	adc	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	6a 95       	dec	r22
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <__unpack_f+0x54>
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	8c 93       	st	X, r24
     d04:	0d c0       	rjmp	.+26     	; 0xd20 <__unpack_f+0x80>
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	44 1f       	adc	r20, r20
     d0c:	55 1f       	adc	r21, r21
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	9c 93       	st	X, r25
     d1c:	8e 93       	st	-X, r24
     d1e:	12 97       	sbiw	r26, 0x02	; 2
     d20:	20 30       	cpi	r18, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	38 07       	cpc	r19, r24
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	48 07       	cpc	r20, r24
     d2a:	80 e4       	ldi	r24, 0x40	; 64
     d2c:	58 07       	cpc	r21, r24
     d2e:	58 f3       	brcs	.-42     	; 0xd06 <__unpack_f+0x66>
     d30:	14 96       	adiw	r26, 0x04	; 4
     d32:	2d 93       	st	X+, r18
     d34:	3d 93       	st	X+, r19
     d36:	4d 93       	st	X+, r20
     d38:	5c 93       	st	X, r21
     d3a:	17 97       	sbiw	r26, 0x07	; 7
     d3c:	08 95       	ret
     d3e:	2f 3f       	cpi	r18, 0xFF	; 255
     d40:	31 05       	cpc	r19, r1
     d42:	79 f4       	brne	.+30     	; 0xd62 <__unpack_f+0xc2>
     d44:	41 15       	cp	r20, r1
     d46:	51 05       	cpc	r21, r1
     d48:	61 05       	cpc	r22, r1
     d4a:	71 05       	cpc	r23, r1
     d4c:	19 f4       	brne	.+6      	; 0xd54 <__unpack_f+0xb4>
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	8c 93       	st	X, r24
     d52:	08 95       	ret
     d54:	64 ff       	sbrs	r22, 4
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <__unpack_f+0xbe>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	8c 93       	st	X, r24
     d5c:	12 c0       	rjmp	.+36     	; 0xd82 <__unpack_f+0xe2>
     d5e:	1c 92       	st	X, r1
     d60:	10 c0       	rjmp	.+32     	; 0xd82 <__unpack_f+0xe2>
     d62:	2f 57       	subi	r18, 0x7F	; 127
     d64:	30 40       	sbci	r19, 0x00	; 0
     d66:	13 96       	adiw	r26, 0x03	; 3
     d68:	3c 93       	st	X, r19
     d6a:	2e 93       	st	-X, r18
     d6c:	12 97       	sbiw	r26, 0x02	; 2
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	8c 93       	st	X, r24
     d72:	87 e0       	ldi	r24, 0x07	; 7
     d74:	44 0f       	add	r20, r20
     d76:	55 1f       	adc	r21, r21
     d78:	66 1f       	adc	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	8a 95       	dec	r24
     d7e:	d1 f7       	brne	.-12     	; 0xd74 <__unpack_f+0xd4>
     d80:	70 64       	ori	r23, 0x40	; 64
     d82:	14 96       	adiw	r26, 0x04	; 4
     d84:	4d 93       	st	X+, r20
     d86:	5d 93       	st	X+, r21
     d88:	6d 93       	st	X+, r22
     d8a:	7c 93       	st	X, r23
     d8c:	17 97       	sbiw	r26, 0x07	; 7
     d8e:	08 95       	ret

00000d90 <__fpcmp_parts_f>:
     d90:	1f 93       	push	r17
     d92:	dc 01       	movw	r26, r24
     d94:	fb 01       	movw	r30, r22
     d96:	9c 91       	ld	r25, X
     d98:	92 30       	cpi	r25, 0x02	; 2
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <__fpcmp_parts_f+0xe>
     d9c:	47 c0       	rjmp	.+142    	; 0xe2c <__fpcmp_parts_f+0x9c>
     d9e:	80 81       	ld	r24, Z
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	08 f4       	brcc	.+2      	; 0xda6 <__fpcmp_parts_f+0x16>
     da4:	43 c0       	rjmp	.+134    	; 0xe2c <__fpcmp_parts_f+0x9c>
     da6:	94 30       	cpi	r25, 0x04	; 4
     da8:	51 f4       	brne	.+20     	; 0xdbe <__fpcmp_parts_f+0x2e>
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	1c 91       	ld	r17, X
     dae:	84 30       	cpi	r24, 0x04	; 4
     db0:	99 f5       	brne	.+102    	; 0xe18 <__fpcmp_parts_f+0x88>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	68 2f       	mov	r22, r24
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	61 1b       	sub	r22, r17
     dba:	71 09       	sbc	r23, r1
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <__fpcmp_parts_f+0xac>
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	21 f0       	breq	.+8      	; 0xdca <__fpcmp_parts_f+0x3a>
     dc2:	92 30       	cpi	r25, 0x02	; 2
     dc4:	31 f4       	brne	.+12     	; 0xdd2 <__fpcmp_parts_f+0x42>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	b9 f1       	breq	.+110    	; 0xe38 <__fpcmp_parts_f+0xa8>
     dca:	81 81       	ldd	r24, Z+1	; 0x01
     dcc:	88 23       	and	r24, r24
     dce:	89 f1       	breq	.+98     	; 0xe32 <__fpcmp_parts_f+0xa2>
     dd0:	2d c0       	rjmp	.+90     	; 0xe2c <__fpcmp_parts_f+0x9c>
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	1c 91       	ld	r17, X
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	f1 f0       	breq	.+60     	; 0xe18 <__fpcmp_parts_f+0x88>
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	18 17       	cp	r17, r24
     de0:	d9 f4       	brne	.+54     	; 0xe18 <__fpcmp_parts_f+0x88>
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	2d 91       	ld	r18, X+
     de6:	3c 91       	ld	r19, X
     de8:	13 97       	sbiw	r26, 0x03	; 3
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	82 17       	cp	r24, r18
     df0:	93 07       	cpc	r25, r19
     df2:	94 f0       	brlt	.+36     	; 0xe18 <__fpcmp_parts_f+0x88>
     df4:	28 17       	cp	r18, r24
     df6:	39 07       	cpc	r19, r25
     df8:	bc f0       	brlt	.+46     	; 0xe28 <__fpcmp_parts_f+0x98>
     dfa:	14 96       	adiw	r26, 0x04	; 4
     dfc:	8d 91       	ld	r24, X+
     dfe:	9d 91       	ld	r25, X+
     e00:	0d 90       	ld	r0, X+
     e02:	bc 91       	ld	r27, X
     e04:	a0 2d       	mov	r26, r0
     e06:	24 81       	ldd	r18, Z+4	; 0x04
     e08:	35 81       	ldd	r19, Z+5	; 0x05
     e0a:	46 81       	ldd	r20, Z+6	; 0x06
     e0c:	57 81       	ldd	r21, Z+7	; 0x07
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	4a 07       	cpc	r20, r26
     e14:	5b 07       	cpc	r21, r27
     e16:	18 f4       	brcc	.+6      	; 0xe1e <__fpcmp_parts_f+0x8e>
     e18:	11 23       	and	r17, r17
     e1a:	41 f0       	breq	.+16     	; 0xe2c <__fpcmp_parts_f+0x9c>
     e1c:	0a c0       	rjmp	.+20     	; 0xe32 <__fpcmp_parts_f+0xa2>
     e1e:	82 17       	cp	r24, r18
     e20:	93 07       	cpc	r25, r19
     e22:	a4 07       	cpc	r26, r20
     e24:	b5 07       	cpc	r27, r21
     e26:	40 f4       	brcc	.+16     	; 0xe38 <__fpcmp_parts_f+0xa8>
     e28:	11 23       	and	r17, r17
     e2a:	19 f0       	breq	.+6      	; 0xe32 <__fpcmp_parts_f+0xa2>
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <__fpcmp_parts_f+0xac>
     e32:	6f ef       	ldi	r22, 0xFF	; 255
     e34:	7f ef       	ldi	r23, 0xFF	; 255
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <__fpcmp_parts_f+0xac>
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	cb 01       	movw	r24, r22
     e3e:	1f 91       	pop	r17
     e40:	08 95       	ret

00000e42 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <ADC_init+0x6>
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= (1 << PB5) | (1 << PB4);
     e50:	a4 e2       	ldi	r26, 0x24	; 36
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e2       	ldi	r30, 0x24	; 36
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 63       	ori	r24, 0x30	; 48
     e5c:	8c 93       	st	X, r24
	/* ADMUX Register Bits Description:
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 * REF1:0  = 00 Clear these two bits before setup the required reference voltage value
	 */
	ADMUX = 0;
     e5e:	ec e7       	ldi	r30, 0x7C	; 124
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	10 82       	st	Z, r1

	/* Setup the reference voltage value inside the REFS1 and REFS0 bits*/
	ADMUX |= (Config_Ptr->ref_volt << 6);
     e64:	ac e7       	ldi	r26, 0x7C	; 124
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ec e7       	ldi	r30, 0x7C	; 124
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	28 2f       	mov	r18, r24
     e70:	e9 81       	ldd	r30, Y+1	; 0x01
     e72:	fa 81       	ldd	r31, Y+2	; 0x02
     e74:	80 81       	ld	r24, Z
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	00 24       	eor	r0, r0
     e7c:	96 95       	lsr	r25
     e7e:	87 95       	ror	r24
     e80:	07 94       	ror	r0
     e82:	96 95       	lsr	r25
     e84:	87 95       	ror	r24
     e86:	07 94       	ror	r0
     e88:	98 2f       	mov	r25, r24
     e8a:	80 2d       	mov	r24, r0
     e8c:	82 2b       	or	r24, r18
     e8e:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable the AUTO trigger
	 * ADPS2:0 = 000 Clear these three bits before setup the required prescaler value
	 */
	ADCSRA = (1 << ADEN);
     e90:	ea e7       	ldi	r30, 0x7A	; 122
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 e8       	ldi	r24, 0x80	; 128
     e96:	80 83       	st	Z, r24

	/* Setup the prescaler value inside the ADPS2, ADPS1 and ADPS0 bits*/
	ADCSRA |= Config_Ptr->prescaler;
     e98:	aa e7       	ldi	r26, 0x7A	; 122
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e7       	ldi	r30, 0x7A	; 122
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	90 81       	ld	r25, Z
     ea2:	e9 81       	ldd	r30, Y+1	; 0x01
     ea4:	fa 81       	ldd	r31, Y+2	; 0x02
     ea6:	81 81       	ldd	r24, Z+1	; 0x01
     ea8:	89 2b       	or	r24, r25
     eaa:	8c 93       	st	X, r24
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	87 70       	andi	r24, 0x07	; 7
     ec6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     ec8:	ac e7       	ldi	r26, 0x7C	; 124
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ec e7       	ldi	r30, 0x7C	; 124
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 7e       	andi	r24, 0xE0	; 224
     ed4:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     ed6:	ac e7       	ldi	r26, 0x7C	; 124
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ec e7       	ldi	r30, 0x7C	; 124
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	90 81       	ld	r25, Z
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	89 2b       	or	r24, r25
     ee4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     ee6:	aa e7       	ldi	r26, 0x7A	; 122
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ea e7       	ldi	r30, 0x7A	; 122
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 64       	ori	r24, 0x40	; 64
     ef2:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     ef4:	ea e7       	ldi	r30, 0x7A	; 122
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	80 71       	andi	r24, 0x10	; 16
     f00:	90 70       	andi	r25, 0x00	; 0
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	b9 f3       	breq	.-18     	; 0xef4 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     f06:	aa e7       	ldi	r26, 0x7A	; 122
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e7       	ldi	r30, 0x7A	; 122
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     f14:	e8 e7       	ldi	r30, 0x78	; 120
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
}
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DcMotors_Init>:
#include "dc_motor.h"
#include "uart.h"
#include "avr/io.h" /* To use the IO Ports Registers */

void DcMotors_Init(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	// Set motor pins as outputs
	DDRD |= (1 << MOTOR1_INPUT1) | (1 << MOTOR1_INPUT2) | (1 << MOTOR2_INPUT1) | (1 << MOTOR2_INPUT2) | (1<< MOTOR1_EN);
     f2c:	aa e2       	ldi	r26, 0x2A	; 42
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ea e2       	ldi	r30, 0x2A	; 42
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 6f       	ori	r24, 0xF8	; 248
     f38:	8c 93       	st	X, r24
	DDRB |= (1 << MOTOR2_EN);
     f3a:	a4 e2       	ldi	r26, 0x24	; 36
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e4 e2       	ldi	r30, 0x24	; 36
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	8c 93       	st	X, r24
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <Car_Move>:

void Car_Move(Car_State state) {
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <Car_Move+0x6>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	89 83       	std	Y+1, r24	; 0x01

	switch(state) {
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3b 83       	std	Y+3, r19	; 0x03
     f64:	2a 83       	std	Y+2, r18	; 0x02
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <Car_Move+0x24>
     f70:	75 c0       	rjmp	.+234    	; 0x105c <Car_Move+0x10e>
     f72:	2a 81       	ldd	r18, Y+2	; 0x02
     f74:	3b 81       	ldd	r19, Y+3	; 0x03
     f76:	23 30       	cpi	r18, 0x03	; 3
     f78:	31 05       	cpc	r19, r1
     f7a:	54 f4       	brge	.+20     	; 0xf90 <Car_Move+0x42>
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	99 f0       	breq	.+38     	; 0xfaa <Car_Move+0x5c>
     f84:	2a 81       	ldd	r18, Y+2	; 0x02
     f86:	3b 81       	ldd	r19, Y+3	; 0x03
     f88:	21 30       	cpi	r18, 0x01	; 1
     f8a:	31 05       	cpc	r19, r1
     f8c:	c9 f1       	breq	.+114    	; 0x1000 <Car_Move+0xb2>
     f8e:	e2 c0       	rjmp	.+452    	; 0x1154 <Car_Move+0x206>
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <Car_Move+0x4e>
     f9a:	87 c0       	rjmp	.+270    	; 0x10aa <Car_Move+0x15c>
     f9c:	2a 81       	ldd	r18, Y+2	; 0x02
     f9e:	3b 81       	ldd	r19, Y+3	; 0x03
     fa0:	24 30       	cpi	r18, 0x04	; 4
     fa2:	31 05       	cpc	r19, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <Car_Move+0x5a>
     fa6:	a8 c0       	rjmp	.+336    	; 0x10f8 <Car_Move+0x1aa>
     fa8:	d5 c0       	rjmp	.+426    	; 0x1154 <Car_Move+0x206>
	case CAR_STOP:
		// Stop the car by setting all motor pins to logic low
		PORTD &=~ (1 << MOTOR1_EN) ;
     faa:	ab e2       	ldi	r26, 0x2B	; 43
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	eb e2       	ldi	r30, 0x2B	; 43
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	87 7f       	andi	r24, 0xF7	; 247
     fb6:	8c 93       	st	X, r24
		PORTB &=~ (1 << MOTOR2_EN);
     fb8:	a5 e2       	ldi	r26, 0x25	; 37
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e2       	ldi	r30, 0x25	; 37
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8d 7f       	andi	r24, 0xFD	; 253
     fc4:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR1_INPUT2) ;
     fc6:	ab e2       	ldi	r26, 0x2B	; 43
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e2       	ldi	r30, 0x2B	; 43
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7d       	andi	r24, 0xDF	; 223
     fd2:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR2_INPUT1);
     fd4:	ab e2       	ldi	r26, 0x2B	; 43
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	eb e2       	ldi	r30, 0x2B	; 43
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7b       	andi	r24, 0xBF	; 191
     fe0:	8c 93       	st	X, r24
		PORTD &=~ (1<< MOTOR1_INPUT1);
     fe2:	ab e2       	ldi	r26, 0x2B	; 43
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e2       	ldi	r30, 0x2B	; 43
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8f 7e       	andi	r24, 0xEF	; 239
     fee:	8c 93       	st	X, r24
		PORTD &=~ (1<< MOTOR2_INPUT2);
     ff0:	ab e2       	ldi	r26, 0x2B	; 43
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	eb e2       	ldi	r30, 0x2B	; 43
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8f 77       	andi	r24, 0x7F	; 127
     ffc:	8c 93       	st	X, r24
     ffe:	d4 c0       	rjmp	.+424    	; 0x11a8 <Car_Move+0x25a>
		break;

	case CAR_FORWARD:
		// Move the car forward by setting the appropriate motor pins to logic high
		PORTD |= (1 << MOTOR1_EN);
    1000:	ab e2       	ldi	r26, 0x2B	; 43
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	eb e2       	ldi	r30, 0x2B	; 43
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	8c 93       	st	X, r24
		PORTB |= (1 << MOTOR2_EN);
    100e:	a5 e2       	ldi	r26, 0x25	; 37
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e2       	ldi	r30, 0x25	; 37
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	8c 93       	st	X, r24
		PORTD |= (1 << MOTOR1_INPUT2);
    101c:	ab e2       	ldi	r26, 0x2B	; 43
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	eb e2       	ldi	r30, 0x2B	; 43
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR1_INPUT1);
    102a:	ab e2       	ldi	r26, 0x2B	; 43
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e2       	ldi	r30, 0x2B	; 43
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8f 7e       	andi	r24, 0xEF	; 239
    1036:	8c 93       	st	X, r24
		PORTD |= (1 << MOTOR2_INPUT2);
    1038:	ab e2       	ldi	r26, 0x2B	; 43
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	eb e2       	ldi	r30, 0x2B	; 43
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 68       	ori	r24, 0x80	; 128
    1044:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR2_INPUT1);
    1046:	ab e2       	ldi	r26, 0x2B	; 43
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e2       	ldi	r30, 0x2B	; 43
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 7b       	andi	r24, 0xBF	; 191
    1052:	8c 93       	st	X, r24
		UART_sendByte('F');
    1054:	86 e4       	ldi	r24, 0x46	; 70
    1056:	0e 94 11 1b 	call	0x3622	; 0x3622 <UART_sendByte>
    105a:	a6 c0       	rjmp	.+332    	; 0x11a8 <Car_Move+0x25a>
		break;

	case CAR_BACKWARD:
		// Move the car backward by setting the appropriate motor pins to logic high
		PORTD |= (1 << MOTOR1_EN);
    105c:	ab e2       	ldi	r26, 0x2B	; 43
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	eb e2       	ldi	r30, 0x2B	; 43
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	88 60       	ori	r24, 0x08	; 8
    1068:	8c 93       	st	X, r24
		PORTB |= (1 << MOTOR2_EN);
    106a:	a5 e2       	ldi	r26, 0x25	; 37
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e5 e2       	ldi	r30, 0x25	; 37
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	8c 93       	st	X, r24
		PORTD |= (1 << MOTOR1_INPUT1) | (1 << MOTOR2_INPUT1);
    1078:	ab e2       	ldi	r26, 0x2B	; 43
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	eb e2       	ldi	r30, 0x2B	; 43
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	80 65       	ori	r24, 0x50	; 80
    1084:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR1_INPUT2);
    1086:	ab e2       	ldi	r26, 0x2B	; 43
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e2       	ldi	r30, 0x2B	; 43
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 7d       	andi	r24, 0xDF	; 223
    1092:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR2_INPUT2);
    1094:	ab e2       	ldi	r26, 0x2B	; 43
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e2       	ldi	r30, 0x2B	; 43
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8f 77       	andi	r24, 0x7F	; 127
    10a0:	8c 93       	st	X, r24
		UART_sendByte('B');
    10a2:	82 e4       	ldi	r24, 0x42	; 66
    10a4:	0e 94 11 1b 	call	0x3622	; 0x3622 <UART_sendByte>
    10a8:	7f c0       	rjmp	.+254    	; 0x11a8 <Car_Move+0x25a>
		break;

	case CAR_LEFT:
		// Turn the car left by setting the appropriate motor pins to logic high
		PORTD |= (1 << MOTOR1_EN);
    10aa:	ab e2       	ldi	r26, 0x2B	; 43
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e2       	ldi	r30, 0x2B	; 43
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 60       	ori	r24, 0x08	; 8
    10b6:	8c 93       	st	X, r24
		PORTB |= (1 << MOTOR2_EN);
    10b8:	a5 e2       	ldi	r26, 0x25	; 37
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e2       	ldi	r30, 0x25	; 37
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	82 60       	ori	r24, 0x02	; 2
    10c4:	8c 93       	st	X, r24
		PORTD |= (1 <<MOTOR1_INPUT2) | (1 << MOTOR2_INPUT1);
    10c6:	ab e2       	ldi	r26, 0x2B	; 43
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	eb e2       	ldi	r30, 0x2B	; 43
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 66       	ori	r24, 0x60	; 96
    10d2:	8c 93       	st	X, r24
		PORTD &=~ (1<<MOTOR1_INPUT1);
    10d4:	ab e2       	ldi	r26, 0x2B	; 43
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	eb e2       	ldi	r30, 0x2B	; 43
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8f 7e       	andi	r24, 0xEF	; 239
    10e0:	8c 93       	st	X, r24
		PORTD &=~ (1<<MOTOR2_INPUT2);
    10e2:	ab e2       	ldi	r26, 0x2B	; 43
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	eb e2       	ldi	r30, 0x2B	; 43
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	8c 93       	st	X, r24
		UART_sendByte('L');
    10f0:	8c e4       	ldi	r24, 0x4C	; 76
    10f2:	0e 94 11 1b 	call	0x3622	; 0x3622 <UART_sendByte>
    10f6:	58 c0       	rjmp	.+176    	; 0x11a8 <Car_Move+0x25a>
		break;

	case CAR_RIGHT:
		// Turn the car right by setting the appropriate motor pins to logic high
		PORTD |= (1 << MOTOR1_EN);
    10f8:	ab e2       	ldi	r26, 0x2B	; 43
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	eb e2       	ldi	r30, 0x2B	; 43
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 60       	ori	r24, 0x08	; 8
    1104:	8c 93       	st	X, r24
		PORTB |= (1 << MOTOR2_EN);
    1106:	a5 e2       	ldi	r26, 0x25	; 37
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e2       	ldi	r30, 0x25	; 37
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR1_INPUT2) ;
    1114:	ab e2       	ldi	r26, 0x2B	; 43
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e2       	ldi	r30, 0x2B	; 43
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7d       	andi	r24, 0xDF	; 223
    1120:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR2_INPUT1);
    1122:	ab e2       	ldi	r26, 0x2B	; 43
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e2       	ldi	r30, 0x2B	; 43
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7b       	andi	r24, 0xBF	; 191
    112e:	8c 93       	st	X, r24
		PORTD |= (1<< MOTOR1_INPUT1);
    1130:	ab e2       	ldi	r26, 0x2B	; 43
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e2       	ldi	r30, 0x2B	; 43
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 61       	ori	r24, 0x10	; 16
    113c:	8c 93       	st	X, r24
		PORTD |= (1<< MOTOR2_INPUT2);
    113e:	ab e2       	ldi	r26, 0x2B	; 43
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e2       	ldi	r30, 0x2B	; 43
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 68       	ori	r24, 0x80	; 128
    114a:	8c 93       	st	X, r24
		UART_sendByte('R');
    114c:	82 e5       	ldi	r24, 0x52	; 82
    114e:	0e 94 11 1b 	call	0x3622	; 0x3622 <UART_sendByte>
    1152:	2a c0       	rjmp	.+84     	; 0x11a8 <Car_Move+0x25a>
		break;

	default:
		// Invalid state, stop the car just in case
		PORTD &=~ (1 << MOTOR1_EN) ;
    1154:	ab e2       	ldi	r26, 0x2B	; 43
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	eb e2       	ldi	r30, 0x2B	; 43
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	87 7f       	andi	r24, 0xF7	; 247
    1160:	8c 93       	st	X, r24
		PORTB &=~ (1 << MOTOR2_EN);
    1162:	a5 e2       	ldi	r26, 0x25	; 37
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e2       	ldi	r30, 0x25	; 37
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8d 7f       	andi	r24, 0xFD	; 253
    116e:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR1_INPUT2) ;
    1170:	ab e2       	ldi	r26, 0x2B	; 43
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e2       	ldi	r30, 0x2B	; 43
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8f 7d       	andi	r24, 0xDF	; 223
    117c:	8c 93       	st	X, r24
		PORTD &=~ (1 << MOTOR2_INPUT1);
    117e:	ab e2       	ldi	r26, 0x2B	; 43
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	eb e2       	ldi	r30, 0x2B	; 43
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7b       	andi	r24, 0xBF	; 191
    118a:	8c 93       	st	X, r24
		PORTD &=~ (1<< MOTOR1_INPUT1);
    118c:	ab e2       	ldi	r26, 0x2B	; 43
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e2       	ldi	r30, 0x2B	; 43
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 7e       	andi	r24, 0xEF	; 239
    1198:	8c 93       	st	X, r24
		PORTD &=~ (1<< MOTOR2_INPUT2);
    119a:	ab e2       	ldi	r26, 0x2B	; 43
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e2       	ldi	r30, 0x2B	; 43
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8f 77       	andi	r24, 0x7F	; 127
    11a6:	8c 93       	st	X, r24
		break;
	}
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <PCF8574_write>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 global_LCD=0;

static uint8 PCF8574_write(uint8 data)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <PCF8574_write+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
	TWI_start();
    11c0:	0e 94 09 1a 	call	0x3412	; 0x3412 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    11c4:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <TWI_getStatus>
    11c8:	88 30       	cpi	r24, 0x08	; 8
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <PCF8574_write+0x1c>
		return ERROR;
    11cc:	1a 82       	std	Y+2, r1	; 0x02
    11ce:	16 c0       	rjmp	.+44     	; 0x11fc <PCF8574_write+0x48>

	TWI_writeByte((slave_address_fixed_bits) | WRITE);
    11d0:	8e e4       	ldi	r24, 0x4E	; 78
    11d2:	0e 94 24 1a 	call	0x3448	; 0x3448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11d6:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <TWI_getStatus>
    11da:	88 31       	cpi	r24, 0x18	; 24
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <PCF8574_write+0x2e>
		return ERROR;
    11de:	1a 82       	std	Y+2, r1	; 0x02
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <PCF8574_write+0x48>

	TWI_writeByte(data);
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	0e 94 24 1a 	call	0x3448	; 0x3448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11e8:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <TWI_getStatus>
    11ec:	88 32       	cpi	r24, 0x28	; 40
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <PCF8574_write+0x40>
			return ERROR;
    11f0:	1a 82       	std	Y+2, r1	; 0x02
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <PCF8574_write+0x48>

	TWI_stop();
    11f4:	0e 94 19 1a 	call	0x3432	; 0x3432 <TWI_stop>

	return SUCCESS;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <LCD_init>:

void LCD_init(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	2e 97       	sbiw	r28, 0x0e	; 14
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
	DDRC |= (1 << PC5) | (1 << PC4);
    121c:	a7 e2       	ldi	r26, 0x27	; 39
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e7 e2       	ldi	r30, 0x27	; 39
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 63       	ori	r24, 0x30	; 48
    1228:	8c 93       	st	X, r24
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a0 ea       	ldi	r26, 0xA0	; 160
    1230:	b1 e4       	ldi	r27, 0x41	; 65
    1232:	8b 87       	std	Y+11, r24	; 0x0b
    1234:	9c 87       	std	Y+12, r25	; 0x0c
    1236:	ad 87       	std	Y+13, r26	; 0x0d
    1238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	6b 85       	ldd	r22, Y+11	; 0x0b
    123c:	7c 85       	ldd	r23, Y+12	; 0x0c
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4a e7       	ldi	r20, 0x7A	; 122
    1248:	55 e4       	ldi	r21, 0x45	; 69
    124a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8f 83       	std	Y+7, r24	; 0x07
    1254:	98 87       	std	Y+8, r25	; 0x08
    1256:	a9 87       	std	Y+9, r26	; 0x09
    1258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <LCD_init+0x74>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <LCD_init+0xf2>
	else if (__tmp > 65535)
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	57 e4       	ldi	r21, 0x47	; 71
    128c:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1290:	18 16       	cp	r1, r24
    1292:	4c f5       	brge	.+82     	; 0x12e6 <LCD_init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	7c 85       	ldd	r23, Y+12	; 0x0c
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <LCD_init+0xd4>
    12be:	80 e9       	ldi	r24, 0x90	; 144
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <LCD_init+0xc2>
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <LCD_init+0xb6>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <LCD_init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <LCD_init+0xfe>
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */
	LCD_sendCommand(LCD_GO_TO_HOME);				//--- Return to Home
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);				//--- 4-Bit Mode 2 - Row Select
    1314:	88 e2       	ldi	r24, 0x28	; 40
    1316:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_ON);	    //--- Cursor on, Blinking on
    131a:	8f e0       	ldi	r24, 0x0F	; 15
    131c:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);				//--- Clear LCD
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_sendCommand>
}
    1326:	2e 96       	adiw	r28, 0x0e	; 14
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	c3 56       	subi	r28, 0x63	; 99
    1346:	d0 40       	sbci	r29, 0x00	; 0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	fe 01       	movw	r30, r28
    1354:	ed 59       	subi	r30, 0x9D	; 157
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	80 83       	st	Z, r24

	CLEAR_BIT(global_LCD,LCD_RS_PIN_ID);
    135a:	80 91 2a 02 	lds	r24, 0x022A
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD); /* Instruction Mode RS=0 */
    1364:	80 91 2a 02 	lds	r24, 0x022A
    1368:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
	CLEAR_BIT(global_LCD,LCD_RW_PIN_ID);
    136c:	80 91 2a 02 	lds	r24, 0x022A
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD); /* write data to LCD so RW=0 */
    1376:	80 91 2a 02 	lds	r24, 0x022A
    137a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    137e:	fe 01       	movw	r30, r28
    1380:	e1 5a       	subi	r30, 0xA1	; 161
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e8       	ldi	r26, 0x80	; 128
    138a:	bf e3       	ldi	r27, 0x3F	; 63
    138c:	80 83       	st	Z, r24
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	a2 83       	std	Z+2, r26	; 0x02
    1392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1394:	8e 01       	movw	r16, r28
    1396:	05 5a       	subi	r16, 0xA5	; 165
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	fe 01       	movw	r30, r28
    139c:	e1 5a       	subi	r30, 0xA1	; 161
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a e7       	ldi	r20, 0x7A	; 122
    13ae:	55 e4       	ldi	r21, 0x45	; 69
    13b0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 83       	st	Z, r24
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	a2 83       	std	Z+2, r26	; 0x02
    13c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13c2:	fe 01       	movw	r30, r28
    13c4:	e5 5a       	subi	r30, 0xA5	; 165
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	44 f4       	brge	.+16     	; 0x13f0 <LCD_sendCommand+0xb8>
		__ticks = 1;
    13e0:	fe 01       	movw	r30, r28
    13e2:	e7 5a       	subi	r30, 0xA7	; 167
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
    13ee:	64 c0       	rjmp	.+200    	; 0x14b8 <LCD_sendCommand+0x180>
	else if (__tmp > 65535)
    13f0:	fe 01       	movw	r30, r28
    13f2:	e5 5a       	subi	r30, 0xA5	; 165
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	57 e4       	ldi	r21, 0x47	; 71
    1406:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    140a:	18 16       	cp	r1, r24
    140c:	0c f0       	brlt	.+2      	; 0x1410 <LCD_sendCommand+0xd8>
    140e:	43 c0       	rjmp	.+134    	; 0x1496 <LCD_sendCommand+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	fe 01       	movw	r30, r28
    1412:	e1 5a       	subi	r30, 0xA1	; 161
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8e 01       	movw	r16, r28
    1430:	07 5a       	subi	r16, 0xA7	; 167
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	f8 01       	movw	r30, r16
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	1f c0       	rjmp	.+62     	; 0x1486 <LCD_sendCommand+0x14e>
    1448:	fe 01       	movw	r30, r28
    144a:	e9 5a       	subi	r30, 0xA9	; 169
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	80 e9       	ldi	r24, 0x90	; 144
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	fe 01       	movw	r30, r28
    1458:	e9 5a       	subi	r30, 0xA9	; 169
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <LCD_sendCommand+0x128>
    1464:	fe 01       	movw	r30, r28
    1466:	e9 5a       	subi	r30, 0xA9	; 169
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	de 01       	movw	r26, r28
    1470:	a7 5a       	subi	r26, 0xA7	; 167
    1472:	bf 4f       	sbci	r27, 0xFF	; 255
    1474:	fe 01       	movw	r30, r28
    1476:	e7 5a       	subi	r30, 0xA7	; 167
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	9c 93       	st	X, r25
    1484:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	fe 01       	movw	r30, r28
    1488:	e7 5a       	subi	r30, 0xA7	; 167
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	d1 f6       	brne	.-76     	; 0x1448 <LCD_sendCommand+0x110>
    1494:	27 c0       	rjmp	.+78     	; 0x14e4 <LCD_sendCommand+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1496:	8e 01       	movw	r16, r28
    1498:	07 5a       	subi	r16, 0xA7	; 167
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	fe 01       	movw	r30, r28
    149e:	e5 5a       	subi	r30, 0xA5	; 165
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	de 01       	movw	r26, r28
    14ba:	ab 5a       	subi	r26, 0xAB	; 171
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	e7 5a       	subi	r30, 0xA7	; 167
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	8d 93       	st	X+, r24
    14ca:	9c 93       	st	X, r25
    14cc:	fe 01       	movw	r30, r28
    14ce:	eb 5a       	subi	r30, 0xAB	; 171
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_sendCommand+0x19e>
    14da:	fe 01       	movw	r30, r28
    14dc:	eb 5a       	subi	r30, 0xAB	; 171
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(global_LCD,LCD_E_PIN_ID);
    14e4:	80 91 2a 02 	lds	r24, 0x022A
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);  /* Enable LCD E=1 */
    14ee:	80 91 2a 02 	lds	r24, 0x022A
    14f2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    14f6:	fe 01       	movw	r30, r28
    14f8:	ef 5a       	subi	r30, 0xAF	; 175
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e8       	ldi	r26, 0x80	; 128
    1502:	bf e3       	ldi	r27, 0x3F	; 63
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	8e 01       	movw	r16, r28
    150e:	03 5b       	subi	r16, 0xB3	; 179
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	ef 5a       	subi	r30, 0xAF	; 175
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	55 e4       	ldi	r21, 0x45	; 69
    1528:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	a2 83       	std	Z+2, r26	; 0x02
    1538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    153a:	fe 01       	movw	r30, r28
    153c:	e3 5b       	subi	r30, 0xB3	; 179
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	44 f4       	brge	.+16     	; 0x1568 <LCD_sendCommand+0x230>
		__ticks = 1;
    1558:	fe 01       	movw	r30, r28
    155a:	e5 5b       	subi	r30, 0xB5	; 181
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	64 c0       	rjmp	.+200    	; 0x1630 <LCD_sendCommand+0x2f8>
	else if (__tmp > 65535)
    1568:	fe 01       	movw	r30, r28
    156a:	e3 5b       	subi	r30, 0xB3	; 179
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	0c f0       	brlt	.+2      	; 0x1588 <LCD_sendCommand+0x250>
    1586:	43 c0       	rjmp	.+134    	; 0x160e <LCD_sendCommand+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1588:	fe 01       	movw	r30, r28
    158a:	ef 5a       	subi	r30, 0xAF	; 175
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8e 01       	movw	r16, r28
    15a8:	05 5b       	subi	r16, 0xB5	; 181
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	f8 01       	movw	r30, r16
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	1f c0       	rjmp	.+62     	; 0x15fe <LCD_sendCommand+0x2c6>
    15c0:	fe 01       	movw	r30, r28
    15c2:	e7 5b       	subi	r30, 0xB7	; 183
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 e9       	ldi	r24, 0x90	; 144
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	fe 01       	movw	r30, r28
    15d0:	e7 5b       	subi	r30, 0xB7	; 183
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <LCD_sendCommand+0x2a0>
    15dc:	fe 01       	movw	r30, r28
    15de:	e7 5b       	subi	r30, 0xB7	; 183
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	de 01       	movw	r26, r28
    15e8:	a5 5b       	subi	r26, 0xB5	; 181
    15ea:	bf 4f       	sbci	r27, 0xFF	; 255
    15ec:	fe 01       	movw	r30, r28
    15ee:	e5 5b       	subi	r30, 0xB5	; 181
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	fe 01       	movw	r30, r28
    1600:	e5 5b       	subi	r30, 0xB5	; 181
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	d1 f6       	brne	.-76     	; 0x15c0 <LCD_sendCommand+0x288>
    160c:	27 c0       	rjmp	.+78     	; 0x165c <LCD_sendCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	8e 01       	movw	r16, r28
    1610:	05 5b       	subi	r16, 0xB5	; 181
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	fe 01       	movw	r30, r28
    1616:	e3 5b       	subi	r30, 0xB3	; 179
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	de 01       	movw	r26, r28
    1632:	a9 5b       	subi	r26, 0xB9	; 185
    1634:	bf 4f       	sbci	r27, 0xFF	; 255
    1636:	fe 01       	movw	r30, r28
    1638:	e5 5b       	subi	r30, 0xB5	; 181
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	8d 93       	st	X+, r24
    1642:	9c 93       	st	X, r25
    1644:	fe 01       	movw	r30, r28
    1646:	e9 5b       	subi	r30, 0xB9	; 185
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_sendCommand+0x316>
    1652:	fe 01       	movw	r30, r28
    1654:	e9 5b       	subi	r30, 0xB9	; 185
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	#ifdef LCD_LAST_PORT_PINS
		global_LCD = (global_LCD & 0x0F) | (command & 0xF0);
    165c:	80 91 2a 02 	lds	r24, 0x022A
    1660:	98 2f       	mov	r25, r24
    1662:	9f 70       	andi	r25, 0x0F	; 15
    1664:	fe 01       	movw	r30, r28
    1666:	ed 59       	subi	r30, 0x9D	; 157
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	80 7f       	andi	r24, 0xF0	; 240
    166e:	89 2b       	or	r24, r25
    1670:	80 93 2a 02 	sts	0x022A, r24
	#else
		global_LCD = (global_LCD & 0xF0) | ((command & 0xF0) >> 4);
	#endif
	PCF8574_write(global_LCD);					//--- Send Data From PCF8574 to LCD PORT
    1674:	80 91 2a 02 	lds	r24, 0x022A
    1678:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    167c:	fe 01       	movw	r30, r28
    167e:	ed 5b       	subi	r30, 0xBD	; 189
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e8       	ldi	r26, 0x80	; 128
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	8e 01       	movw	r16, r28
    1694:	01 5c       	subi	r16, 0xC1	; 193
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	fe 01       	movw	r30, r28
    169a:	ed 5b       	subi	r30, 0xBD	; 189
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a e7       	ldi	r20, 0x7A	; 122
    16ac:	55 e4       	ldi	r21, 0x45	; 69
    16ae:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 83       	st	Z, r24
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	a2 83       	std	Z+2, r26	; 0x02
    16be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c0:	fe 01       	movw	r30, r28
    16c2:	ff 96       	adiw	r30, 0x3f	; 63
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <LCD_sendCommand+0x3ae>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e af       	std	Y+62, r25	; 0x3e
    16e2:	8d af       	std	Y+61, r24	; 0x3d
    16e4:	46 c0       	rjmp	.+140    	; 0x1772 <LCD_sendCommand+0x43a>
	else if (__tmp > 65535)
    16e6:	fe 01       	movw	r30, r28
    16e8:	ff 96       	adiw	r30, 0x3f	; 63
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	57 e4       	ldi	r21, 0x47	; 71
    16fa:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    16fe:	18 16       	cp	r1, r24
    1700:	64 f5       	brge	.+88     	; 0x175a <LCD_sendCommand+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5b       	subi	r30, 0xBD	; 189
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e af       	std	Y+62, r25	; 0x3e
    172e:	8d af       	std	Y+61, r24	; 0x3d
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <LCD_sendCommand+0x418>
    1732:	80 e9       	ldi	r24, 0x90	; 144
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	9c af       	std	Y+60, r25	; 0x3c
    1738:	8b af       	std	Y+59, r24	; 0x3b
    173a:	8b ad       	ldd	r24, Y+59	; 0x3b
    173c:	9c ad       	ldd	r25, Y+60	; 0x3c
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_sendCommand+0x406>
    1742:	9c af       	std	Y+60, r25	; 0x3c
    1744:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d ad       	ldd	r24, Y+61	; 0x3d
    1748:	9e ad       	ldd	r25, Y+62	; 0x3e
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e af       	std	Y+62, r25	; 0x3e
    174e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d ad       	ldd	r24, Y+61	; 0x3d
    1752:	9e ad       	ldd	r25, Y+62	; 0x3e
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <LCD_sendCommand+0x3fa>
    1758:	16 c0       	rjmp	.+44     	; 0x1786 <LCD_sendCommand+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	fe 01       	movw	r30, r28
    175c:	ff 96       	adiw	r30, 0x3f	; 63
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e af       	std	Y+62, r25	; 0x3e
    1770:	8d af       	std	Y+61, r24	; 0x3d
    1772:	8d ad       	ldd	r24, Y+61	; 0x3d
    1774:	9e ad       	ldd	r25, Y+62	; 0x3e
    1776:	9a af       	std	Y+58, r25	; 0x3a
    1778:	89 af       	std	Y+57, r24	; 0x39
    177a:	89 ad       	ldd	r24, Y+57	; 0x39
    177c:	9a ad       	ldd	r25, Y+58	; 0x3a
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_sendCommand+0x446>
    1782:	9a af       	std	Y+58, r25	; 0x3a
    1784:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(global_LCD,LCD_E_PIN_ID);
    1786:	80 91 2a 02 	lds	r24, 0x022A
    178a:	8b 7f       	andi	r24, 0xFB	; 251
    178c:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);   /* Disable LCD E=0 */
    1790:	80 91 2a 02 	lds	r24, 0x022A
    1794:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e8       	ldi	r26, 0x80	; 128
    179e:	bf e3       	ldi	r27, 0x3F	; 63
    17a0:	8d ab       	std	Y+53, r24	; 0x35
    17a2:	9e ab       	std	Y+54, r25	; 0x36
    17a4:	af ab       	std	Y+55, r26	; 0x37
    17a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	6d a9       	ldd	r22, Y+53	; 0x35
    17aa:	7e a9       	ldd	r23, Y+54	; 0x36
    17ac:	8f a9       	ldd	r24, Y+55	; 0x37
    17ae:	98 ad       	ldd	r25, Y+56	; 0x38
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a e7       	ldi	r20, 0x7A	; 122
    17b6:	55 e4       	ldi	r21, 0x45	; 69
    17b8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	89 ab       	std	Y+49, r24	; 0x31
    17c2:	9a ab       	std	Y+50, r25	; 0x32
    17c4:	ab ab       	std	Y+51, r26	; 0x33
    17c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ca:	7a a9       	ldd	r23, Y+50	; 0x32
    17cc:	8b a9       	ldd	r24, Y+51	; 0x33
    17ce:	9c a9       	ldd	r25, Y+52	; 0x34
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <LCD_sendCommand+0x4b2>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	98 ab       	std	Y+48, r25	; 0x30
    17e6:	8f a7       	std	Y+47, r24	; 0x2f
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <LCD_sendCommand+0x530>
	else if (__tmp > 65535)
    17ea:	69 a9       	ldd	r22, Y+49	; 0x31
    17ec:	7a a9       	ldd	r23, Y+50	; 0x32
    17ee:	8b a9       	ldd	r24, Y+51	; 0x33
    17f0:	9c a9       	ldd	r25, Y+52	; 0x34
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <LCD_sendCommand+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	6d a9       	ldd	r22, Y+53	; 0x35
    1804:	7e a9       	ldd	r23, Y+54	; 0x36
    1806:	8f a9       	ldd	r24, Y+55	; 0x37
    1808:	98 ad       	ldd	r25, Y+56	; 0x38
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	98 ab       	std	Y+48, r25	; 0x30
    1828:	8f a7       	std	Y+47, r24	; 0x2f
    182a:	0f c0       	rjmp	.+30     	; 0x184a <LCD_sendCommand+0x512>
    182c:	80 e9       	ldi	r24, 0x90	; 144
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	9e a7       	std	Y+46, r25	; 0x2e
    1832:	8d a7       	std	Y+45, r24	; 0x2d
    1834:	8d a5       	ldd	r24, Y+45	; 0x2d
    1836:	9e a5       	ldd	r25, Y+46	; 0x2e
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_sendCommand+0x500>
    183c:	9e a7       	std	Y+46, r25	; 0x2e
    183e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8f a5       	ldd	r24, Y+47	; 0x2f
    1842:	98 a9       	ldd	r25, Y+48	; 0x30
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8f a5       	ldd	r24, Y+47	; 0x2f
    184c:	98 a9       	ldd	r25, Y+48	; 0x30
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <LCD_sendCommand+0x4f4>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <LCD_sendCommand+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	69 a9       	ldd	r22, Y+49	; 0x31
    1856:	7a a9       	ldd	r23, Y+50	; 0x32
    1858:	8b a9       	ldd	r24, Y+51	; 0x33
    185a:	9c a9       	ldd	r25, Y+52	; 0x34
    185c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	98 ab       	std	Y+48, r25	; 0x30
    1866:	8f a7       	std	Y+47, r24	; 0x2f
    1868:	8f a5       	ldd	r24, Y+47	; 0x2f
    186a:	98 a9       	ldd	r25, Y+48	; 0x30
    186c:	9c a7       	std	Y+44, r25	; 0x2c
    186e:	8b a7       	std	Y+43, r24	; 0x2b
    1870:	8b a5       	ldd	r24, Y+43	; 0x2b
    1872:	9c a5       	ldd	r25, Y+44	; 0x2c
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0x53c>
    1878:	9c a7       	std	Y+44, r25	; 0x2c
    187a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(global_LCD,LCD_E_PIN_ID);
    187c:	80 91 2a 02 	lds	r24, 0x022A
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);  /* Enable LCD E=1 */
    1886:	80 91 2a 02 	lds	r24, 0x022A
    188a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e8       	ldi	r26, 0x80	; 128
    1894:	bf e3       	ldi	r27, 0x3F	; 63
    1896:	8f a3       	std	Y+39, r24	; 0x27
    1898:	98 a7       	std	Y+40, r25	; 0x28
    189a:	a9 a7       	std	Y+41, r26	; 0x29
    189c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6f a1       	ldd	r22, Y+39	; 0x27
    18a0:	78 a5       	ldd	r23, Y+40	; 0x28
    18a2:	89 a5       	ldd	r24, Y+41	; 0x29
    18a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a e7       	ldi	r20, 0x7A	; 122
    18ac:	55 e4       	ldi	r21, 0x45	; 69
    18ae:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8b a3       	std	Y+35, r24	; 0x23
    18b8:	9c a3       	std	Y+36, r25	; 0x24
    18ba:	ad a3       	std	Y+37, r26	; 0x25
    18bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18be:	6b a1       	ldd	r22, Y+35	; 0x23
    18c0:	7c a1       	ldd	r23, Y+36	; 0x24
    18c2:	8d a1       	ldd	r24, Y+37	; 0x25
    18c4:	9e a1       	ldd	r25, Y+38	; 0x26
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <LCD_sendCommand+0x5a8>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
    18de:	3f c0       	rjmp	.+126    	; 0x195e <LCD_sendCommand+0x626>
	else if (__tmp > 65535)
    18e0:	6b a1       	ldd	r22, Y+35	; 0x23
    18e2:	7c a1       	ldd	r23, Y+36	; 0x24
    18e4:	8d a1       	ldd	r24, Y+37	; 0x25
    18e6:	9e a1       	ldd	r25, Y+38	; 0x26
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <LCD_sendCommand+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6f a1       	ldd	r22, Y+39	; 0x27
    18fa:	78 a5       	ldd	r23, Y+40	; 0x28
    18fc:	89 a5       	ldd	r24, Y+41	; 0x29
    18fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9a a3       	std	Y+34, r25	; 0x22
    191e:	89 a3       	std	Y+33, r24	; 0x21
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_sendCommand+0x608>
    1922:	80 e9       	ldi	r24, 0x90	; 144
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	98 a3       	std	Y+32, r25	; 0x20
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
    192a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    192c:	98 a1       	ldd	r25, Y+32	; 0x20
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_sendCommand+0x5f6>
    1932:	98 a3       	std	Y+32, r25	; 0x20
    1934:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	89 a1       	ldd	r24, Y+33	; 0x21
    1938:	9a a1       	ldd	r25, Y+34	; 0x22
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_sendCommand+0x5ea>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <LCD_sendCommand+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	6b a1       	ldd	r22, Y+35	; 0x23
    194c:	7c a1       	ldd	r23, Y+36	; 0x24
    194e:	8d a1       	ldd	r24, Y+37	; 0x25
    1950:	9e a1       	ldd	r25, Y+38	; 0x26
    1952:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9a a3       	std	Y+34, r25	; 0x22
    195c:	89 a3       	std	Y+33, r24	; 0x21
    195e:	89 a1       	ldd	r24, Y+33	; 0x21
    1960:	9a a1       	ldd	r25, Y+34	; 0x22
    1962:	9e 8f       	std	Y+30, r25	; 0x1e
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
    1966:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1968:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_sendCommand+0x632>
    196e:	9e 8f       	std	Y+30, r25	; 0x1e
    1970:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	//lcd_port_value = 0;
	#ifdef LCD_LAST_PORT_PINS
		global_LCD = (global_LCD & 0x0F) | ((command & 0x0F) << 4);
    1972:	80 91 2a 02 	lds	r24, 0x022A
    1976:	28 2f       	mov	r18, r24
    1978:	2f 70       	andi	r18, 0x0F	; 15
    197a:	fe 01       	movw	r30, r28
    197c:	ed 59       	subi	r30, 0x9D	; 157
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	82 95       	swap	r24
    1988:	92 95       	swap	r25
    198a:	90 7f       	andi	r25, 0xF0	; 240
    198c:	98 27       	eor	r25, r24
    198e:	80 7f       	andi	r24, 0xF0	; 240
    1990:	98 27       	eor	r25, r24
    1992:	82 2b       	or	r24, r18
    1994:	80 93 2a 02 	sts	0x022A, r24
	#else
		global_LCD = (global_LCD & 0xF0) | (command & 0x0F);
	#endif
		PCF8574_write(global_LCD);
    1998:	80 91 2a 02 	lds	r24, 0x022A
    199c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e8       	ldi	r26, 0x80	; 128
    19a6:	bf e3       	ldi	r27, 0x3F	; 63
    19a8:	89 8f       	std	Y+25, r24	; 0x19
    19aa:	9a 8f       	std	Y+26, r25	; 0x1a
    19ac:	ab 8f       	std	Y+27, r26	; 0x1b
    19ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b0:	69 8d       	ldd	r22, Y+25	; 0x19
    19b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a e7       	ldi	r20, 0x7A	; 122
    19be:	55 e4       	ldi	r21, 0x45	; 69
    19c0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	8d 8b       	std	Y+21, r24	; 0x15
    19ca:	9e 8b       	std	Y+22, r25	; 0x16
    19cc:	af 8b       	std	Y+23, r26	; 0x17
    19ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d0:	6d 89       	ldd	r22, Y+21	; 0x15
    19d2:	7e 89       	ldd	r23, Y+22	; 0x16
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <LCD_sendCommand+0x6ba>
		__ticks = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9c 8b       	std	Y+20, r25	; 0x14
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
    19f0:	3f c0       	rjmp	.+126    	; 0x1a70 <LCD_sendCommand+0x738>
	else if (__tmp > 65535)
    19f2:	6d 89       	ldd	r22, Y+21	; 0x15
    19f4:	7e 89       	ldd	r23, Y+22	; 0x16
    19f6:	8f 89       	ldd	r24, Y+23	; 0x17
    19f8:	98 8d       	ldd	r25, Y+24	; 0x18
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	4c f5       	brge	.+82     	; 0x1a5c <LCD_sendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e2       	ldi	r20, 0x20	; 32
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
    1a32:	0f c0       	rjmp	.+30     	; 0x1a52 <LCD_sendCommand+0x71a>
    1a34:	80 e9       	ldi	r24, 0x90	; 144
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	9a 8b       	std	Y+18, r25	; 0x12
    1a3a:	89 8b       	std	Y+17, r24	; 0x11
    1a3c:	89 89       	ldd	r24, Y+17	; 0x11
    1a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_sendCommand+0x708>
    1a44:	9a 8b       	std	Y+18, r25	; 0x12
    1a46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a52:	8b 89       	ldd	r24, Y+19	; 0x13
    1a54:	9c 89       	ldd	r25, Y+20	; 0x14
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	69 f7       	brne	.-38     	; 0x1a34 <LCD_sendCommand+0x6fc>
    1a5a:	14 c0       	rjmp	.+40     	; 0x1a84 <LCD_sendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a60:	8f 89       	ldd	r24, Y+23	; 0x17
    1a62:	98 8d       	ldd	r25, Y+24	; 0x18
    1a64:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	8b 89       	ldd	r24, Y+19	; 0x13
    1a72:	9c 89       	ldd	r25, Y+20	; 0x14
    1a74:	98 8b       	std	Y+16, r25	; 0x10
    1a76:	8f 87       	std	Y+15, r24	; 0x0f
    1a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7a:	98 89       	ldd	r25, Y+16	; 0x10
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0x744>
    1a80:	98 8b       	std	Y+16, r25	; 0x10
    1a82:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(global_LCD,LCD_E_PIN_ID);
    1a84:	80 91 2a 02 	lds	r24, 0x022A
    1a88:	8b 7f       	andi	r24, 0xFB	; 251
    1a8a:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);   /* Disable LCD E=0 */
    1a8e:	80 91 2a 02 	lds	r24, 0x022A
    1a92:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e8       	ldi	r26, 0x80	; 128
    1a9c:	bf e3       	ldi	r27, 0x3F	; 63
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b
    1aa0:	9c 87       	std	Y+12, r25	; 0x0c
    1aa2:	ad 87       	std	Y+13, r26	; 0x0d
    1aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a e7       	ldi	r20, 0x7A	; 122
    1ab4:	55 e4       	ldi	r21, 0x45	; 69
    1ab6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
    1ac2:	a9 87       	std	Y+9, r26	; 0x09
    1ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <LCD_sendCommand+0x7b0>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <LCD_sendCommand+0x82e>
	else if (__tmp > 65535)
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <LCD_sendCommand+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <LCD_sendCommand+0x810>
    1b2a:	80 e9       	ldi	r24, 0x90	; 144
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_sendCommand+0x7fe>
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <LCD_sendCommand+0x7f2>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <LCD_sendCommand+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_sendCommand+0x83a>
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1b7a:	cd 59       	subi	r28, 0x9D	; 157
    1b7c:	df 4f       	sbci	r29, 0xFF	; 255
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	08 95       	ret

00001b92 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	c3 56       	subi	r28, 0x63	; 99
    1ba0:	d0 40       	sbci	r29, 0x00	; 0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 59       	subi	r30, 0x9D	; 157
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 83       	st	Z, r24
	SET_BIT(global_LCD,LCD_RS_PIN_ID);
    1bb4:	80 91 2a 02 	lds	r24, 0x022A
    1bb8:	81 60       	ori	r24, 0x01	; 1
    1bba:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD ); /* Data Mode RS=1 */
    1bbe:	80 91 2a 02 	lds	r24, 0x022A
    1bc2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>

	CLEAR_BIT(global_LCD,LCD_RW_PIN_ID);
    1bc6:	80 91 2a 02 	lds	r24, 0x022A
    1bca:	8d 7f       	andi	r24, 0xFD	; 253
    1bcc:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD); /* write data to LCD so RW=0 */
    1bd0:	80 91 2a 02 	lds	r24, 0x022A
    1bd4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e1 5a       	subi	r30, 0xA1	; 161
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	8e 01       	movw	r16, r28
    1bf0:	05 5a       	subi	r16, 0xA5	; 165
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e1 5a       	subi	r30, 0xA1	; 161
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a e7       	ldi	r20, 0x7A	; 122
    1c08:	55 e4       	ldi	r21, 0x45	; 69
    1c0a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	f8 01       	movw	r30, r16
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e5 5a       	subi	r30, 0xA5	; 165
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	44 f4       	brge	.+16     	; 0x1c4a <LCD_displayCharacter+0xb8>
		__ticks = 1;
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e7 5a       	subi	r30, 0xA7	; 167
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	64 c0       	rjmp	.+200    	; 0x1d12 <LCD_displayCharacter+0x180>
	else if (__tmp > 65535)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 5a       	subi	r30, 0xA5	; 165
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <LCD_displayCharacter+0xd8>
    1c68:	43 c0       	rjmp	.+134    	; 0x1cf0 <LCD_displayCharacter+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e1 5a       	subi	r30, 0xA1	; 161
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e2       	ldi	r20, 0x20	; 32
    1c7e:	51 e4       	ldi	r21, 0x41	; 65
    1c80:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8e 01       	movw	r16, r28
    1c8a:	07 5a       	subi	r16, 0xA7	; 167
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	1f c0       	rjmp	.+62     	; 0x1ce0 <LCD_displayCharacter+0x14e>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e9 5a       	subi	r30, 0xA9	; 169
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 e9       	ldi	r24, 0x90	; 144
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e9 5a       	subi	r30, 0xA9	; 169
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_displayCharacter+0x128>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e9 5a       	subi	r30, 0xA9	; 169
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	de 01       	movw	r26, r28
    1cca:	a7 5a       	subi	r26, 0xA7	; 167
    1ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e7 5a       	subi	r30, 0xA7	; 167
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	11 96       	adiw	r26, 0x01	; 1
    1cdc:	9c 93       	st	X, r25
    1cde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5a       	subi	r30, 0xA7	; 167
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	d1 f6       	brne	.-76     	; 0x1ca2 <LCD_displayCharacter+0x110>
    1cee:	27 c0       	rjmp	.+78     	; 0x1d3e <LCD_displayCharacter+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	07 5a       	subi	r16, 0xA7	; 167
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e5 5a       	subi	r30, 0xA5	; 165
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
    1d12:	de 01       	movw	r26, r28
    1d14:	ab 5a       	subi	r26, 0xAB	; 171
    1d16:	bf 4f       	sbci	r27, 0xFF	; 255
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e7 5a       	subi	r30, 0xA7	; 167
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	8d 93       	st	X+, r24
    1d24:	9c 93       	st	X, r25
    1d26:	fe 01       	movw	r30, r28
    1d28:	eb 5a       	subi	r30, 0xAB	; 171
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_displayCharacter+0x19e>
    1d34:	fe 01       	movw	r30, r28
    1d36:	eb 5a       	subi	r30, 0xAB	; 171
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
    SET_BIT(global_LCD,LCD_E_PIN_ID);
    1d3e:	80 91 2a 02 	lds	r24, 0x022A
    1d42:	84 60       	ori	r24, 0x04	; 4
    1d44:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);  /* Enable LCD E=1 */
    1d48:	80 91 2a 02 	lds	r24, 0x022A
    1d4c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    1d50:	fe 01       	movw	r30, r28
    1d52:	ef 5a       	subi	r30, 0xAF	; 175
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 e8       	ldi	r26, 0x80	; 128
    1d5c:	bf e3       	ldi	r27, 0x3F	; 63
    1d5e:	80 83       	st	Z, r24
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	a2 83       	std	Z+2, r26	; 0x02
    1d64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	8e 01       	movw	r16, r28
    1d68:	03 5b       	subi	r16, 0xB3	; 179
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 5a       	subi	r30, 0xAF	; 175
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	55 e4       	ldi	r21, 0x45	; 69
    1d82:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	80 83       	st	Z, r24
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	a2 83       	std	Z+2, r26	; 0x02
    1d92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d94:	fe 01       	movw	r30, r28
    1d96:	e3 5b       	subi	r30, 0xB3	; 179
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	44 f4       	brge	.+16     	; 0x1dc2 <LCD_displayCharacter+0x230>
		__ticks = 1;
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5b       	subi	r30, 0xB5	; 181
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
    1dc0:	64 c0       	rjmp	.+200    	; 0x1e8a <LCD_displayCharacter+0x2f8>
	else if (__tmp > 65535)
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 5b       	subi	r30, 0xB3	; 179
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	0c f0       	brlt	.+2      	; 0x1de2 <LCD_displayCharacter+0x250>
    1de0:	43 c0       	rjmp	.+134    	; 0x1e68 <LCD_displayCharacter+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	fe 01       	movw	r30, r28
    1de4:	ef 5a       	subi	r30, 0xAF	; 175
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8e 01       	movw	r16, r28
    1e02:	05 5b       	subi	r16, 0xB5	; 181
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	f8 01       	movw	r30, r16
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	1f c0       	rjmp	.+62     	; 0x1e58 <LCD_displayCharacter+0x2c6>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e7 5b       	subi	r30, 0xB7	; 183
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 e9       	ldi	r24, 0x90	; 144
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e7 5b       	subi	r30, 0xB7	; 183
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_displayCharacter+0x2a0>
    1e36:	fe 01       	movw	r30, r28
    1e38:	e7 5b       	subi	r30, 0xB7	; 183
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	de 01       	movw	r26, r28
    1e42:	a5 5b       	subi	r26, 0xB5	; 181
    1e44:	bf 4f       	sbci	r27, 0xFF	; 255
    1e46:	fe 01       	movw	r30, r28
    1e48:	e5 5b       	subi	r30, 0xB5	; 181
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	11 96       	adiw	r26, 0x01	; 1
    1e54:	9c 93       	st	X, r25
    1e56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e5 5b       	subi	r30, 0xB5	; 181
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	d1 f6       	brne	.-76     	; 0x1e1a <LCD_displayCharacter+0x288>
    1e66:	27 c0       	rjmp	.+78     	; 0x1eb6 <LCD_displayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	8e 01       	movw	r16, r28
    1e6a:	05 5b       	subi	r16, 0xB5	; 181
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e3 5b       	subi	r30, 0xB3	; 179
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	f8 01       	movw	r30, r16
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
    1e8a:	de 01       	movw	r26, r28
    1e8c:	a9 5b       	subi	r26, 0xB9	; 185
    1e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	e5 5b       	subi	r30, 0xB5	; 181
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	8d 93       	st	X+, r24
    1e9c:	9c 93       	st	X, r25
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 5b       	subi	r30, 0xB9	; 185
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_displayCharacter+0x316>
    1eac:	fe 01       	movw	r30, r28
    1eae:	e9 5b       	subi	r30, 0xB9	; 185
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	#ifdef LCD_LAST_PORT_PINS
		global_LCD = (global_LCD & 0x0F) | (data & 0xF0);
    1eb6:	80 91 2a 02 	lds	r24, 0x022A
    1eba:	98 2f       	mov	r25, r24
    1ebc:	9f 70       	andi	r25, 0x0F	; 15
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ed 59       	subi	r30, 0x9D	; 157
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 7f       	andi	r24, 0xF0	; 240
    1ec8:	89 2b       	or	r24, r25
    1eca:	80 93 2a 02 	sts	0x022A, r24
	#else
		global_LCD = (global_LCD & 0xF0) | ((data & 0xF0) >> 4);
	#endif
	PCF8574_write(global_LCD);					//--- Send Data From PCF8574 to LCD PORT
    1ece:	80 91 2a 02 	lds	r24, 0x022A
    1ed2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ed 5b       	subi	r30, 0xBD	; 189
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 e8       	ldi	r26, 0x80	; 128
    1ee2:	bf e3       	ldi	r27, 0x3F	; 63
    1ee4:	80 83       	st	Z, r24
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	a2 83       	std	Z+2, r26	; 0x02
    1eea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	8e 01       	movw	r16, r28
    1eee:	01 5c       	subi	r16, 0xC1	; 193
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ed 5b       	subi	r30, 0xBD	; 189
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a e7       	ldi	r20, 0x7A	; 122
    1f06:	55 e4       	ldi	r21, 0x45	; 69
    1f08:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	a2 83       	std	Z+2, r26	; 0x02
    1f18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ff 96       	adiw	r30, 0x3f	; 63
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <LCD_displayCharacter+0x3ae>
		__ticks = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9e af       	std	Y+62, r25	; 0x3e
    1f3c:	8d af       	std	Y+61, r24	; 0x3d
    1f3e:	46 c0       	rjmp	.+140    	; 0x1fcc <LCD_displayCharacter+0x43a>
	else if (__tmp > 65535)
    1f40:	fe 01       	movw	r30, r28
    1f42:	ff 96       	adiw	r30, 0x3f	; 63
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	64 f5       	brge	.+88     	; 0x1fb4 <LCD_displayCharacter+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ed 5b       	subi	r30, 0xBD	; 189
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e af       	std	Y+62, r25	; 0x3e
    1f88:	8d af       	std	Y+61, r24	; 0x3d
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_displayCharacter+0x418>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9c af       	std	Y+60, r25	; 0x3c
    1f92:	8b af       	std	Y+59, r24	; 0x3b
    1f94:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f96:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_displayCharacter+0x406>
    1f9c:	9c af       	std	Y+60, r25	; 0x3c
    1f9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fa2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9e af       	std	Y+62, r25	; 0x3e
    1fa8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <LCD_displayCharacter+0x3fa>
    1fb2:	16 c0       	rjmp	.+44     	; 0x1fe0 <LCD_displayCharacter+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ff 96       	adiw	r30, 0x3f	; 63
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e af       	std	Y+62, r25	; 0x3e
    1fca:	8d af       	std	Y+61, r24	; 0x3d
    1fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd0:	9a af       	std	Y+58, r25	; 0x3a
    1fd2:	89 af       	std	Y+57, r24	; 0x39
    1fd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_displayCharacter+0x446>
    1fdc:	9a af       	std	Y+58, r25	; 0x3a
    1fde:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(global_LCD,LCD_E_PIN_ID);
    1fe0:	80 91 2a 02 	lds	r24, 0x022A
    1fe4:	8b 7f       	andi	r24, 0xFB	; 251
    1fe6:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);   /* Disable LCD E=0 */
    1fea:	80 91 2a 02 	lds	r24, 0x022A
    1fee:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 e8       	ldi	r26, 0x80	; 128
    1ff8:	bf e3       	ldi	r27, 0x3F	; 63
    1ffa:	8d ab       	std	Y+53, r24	; 0x35
    1ffc:	9e ab       	std	Y+54, r25	; 0x36
    1ffe:	af ab       	std	Y+55, r26	; 0x37
    2000:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2002:	6d a9       	ldd	r22, Y+53	; 0x35
    2004:	7e a9       	ldd	r23, Y+54	; 0x36
    2006:	8f a9       	ldd	r24, Y+55	; 0x37
    2008:	98 ad       	ldd	r25, Y+56	; 0x38
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a e7       	ldi	r20, 0x7A	; 122
    2010:	55 e4       	ldi	r21, 0x45	; 69
    2012:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	89 ab       	std	Y+49, r24	; 0x31
    201c:	9a ab       	std	Y+50, r25	; 0x32
    201e:	ab ab       	std	Y+51, r26	; 0x33
    2020:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2022:	69 a9       	ldd	r22, Y+49	; 0x31
    2024:	7a a9       	ldd	r23, Y+50	; 0x32
    2026:	8b a9       	ldd	r24, Y+51	; 0x33
    2028:	9c a9       	ldd	r25, Y+52	; 0x34
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2036:	88 23       	and	r24, r24
    2038:	2c f4       	brge	.+10     	; 0x2044 <LCD_displayCharacter+0x4b2>
		__ticks = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	98 ab       	std	Y+48, r25	; 0x30
    2040:	8f a7       	std	Y+47, r24	; 0x2f
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
    2044:	69 a9       	ldd	r22, Y+49	; 0x31
    2046:	7a a9       	ldd	r23, Y+50	; 0x32
    2048:	8b a9       	ldd	r24, Y+51	; 0x33
    204a:	9c a9       	ldd	r25, Y+52	; 0x34
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	4c f5       	brge	.+82     	; 0x20ae <LCD_displayCharacter+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205c:	6d a9       	ldd	r22, Y+53	; 0x35
    205e:	7e a9       	ldd	r23, Y+54	; 0x36
    2060:	8f a9       	ldd	r24, Y+55	; 0x37
    2062:	98 ad       	ldd	r25, Y+56	; 0x38
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e2       	ldi	r20, 0x20	; 32
    206a:	51 e4       	ldi	r21, 0x41	; 65
    206c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	98 ab       	std	Y+48, r25	; 0x30
    2082:	8f a7       	std	Y+47, r24	; 0x2f
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <LCD_displayCharacter+0x512>
    2086:	80 e9       	ldi	r24, 0x90	; 144
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	9e a7       	std	Y+46, r25	; 0x2e
    208c:	8d a7       	std	Y+45, r24	; 0x2d
    208e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2090:	9e a5       	ldd	r25, Y+46	; 0x2e
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_displayCharacter+0x500>
    2096:	9e a7       	std	Y+46, r25	; 0x2e
    2098:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	8f a5       	ldd	r24, Y+47	; 0x2f
    209c:	98 a9       	ldd	r25, Y+48	; 0x30
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	98 ab       	std	Y+48, r25	; 0x30
    20a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a6:	98 a9       	ldd	r25, Y+48	; 0x30
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	69 f7       	brne	.-38     	; 0x2086 <LCD_displayCharacter+0x4f4>
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <LCD_displayCharacter+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	69 a9       	ldd	r22, Y+49	; 0x31
    20b0:	7a a9       	ldd	r23, Y+50	; 0x32
    20b2:	8b a9       	ldd	r24, Y+51	; 0x33
    20b4:	9c a9       	ldd	r25, Y+52	; 0x34
    20b6:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	98 ab       	std	Y+48, r25	; 0x30
    20c0:	8f a7       	std	Y+47, r24	; 0x2f
    20c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c4:	98 a9       	ldd	r25, Y+48	; 0x30
    20c6:	9c a7       	std	Y+44, r25	; 0x2c
    20c8:	8b a7       	std	Y+43, r24	; 0x2b
    20ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    20cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_displayCharacter+0x53c>
    20d2:	9c a7       	std	Y+44, r25	; 0x2c
    20d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(global_LCD,LCD_E_PIN_ID);
    20d6:	80 91 2a 02 	lds	r24, 0x022A
    20da:	84 60       	ori	r24, 0x04	; 4
    20dc:	80 93 2a 02 	sts	0x022A, r24
	PCF8574_write(global_LCD);  /* Enable LCD E=1 */
    20e0:	80 91 2a 02 	lds	r24, 0x022A
    20e4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e8       	ldi	r26, 0x80	; 128
    20ee:	bf e3       	ldi	r27, 0x3F	; 63
    20f0:	8f a3       	std	Y+39, r24	; 0x27
    20f2:	98 a7       	std	Y+40, r25	; 0x28
    20f4:	a9 a7       	std	Y+41, r26	; 0x29
    20f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f8:	6f a1       	ldd	r22, Y+39	; 0x27
    20fa:	78 a5       	ldd	r23, Y+40	; 0x28
    20fc:	89 a5       	ldd	r24, Y+41	; 0x29
    20fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4a e7       	ldi	r20, 0x7A	; 122
    2106:	55 e4       	ldi	r21, 0x45	; 69
    2108:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	8b a3       	std	Y+35, r24	; 0x23
    2112:	9c a3       	std	Y+36, r25	; 0x24
    2114:	ad a3       	std	Y+37, r26	; 0x25
    2116:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2118:	6b a1       	ldd	r22, Y+35	; 0x23
    211a:	7c a1       	ldd	r23, Y+36	; 0x24
    211c:	8d a1       	ldd	r24, Y+37	; 0x25
    211e:	9e a1       	ldd	r25, Y+38	; 0x26
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	2c f4       	brge	.+10     	; 0x213a <LCD_displayCharacter+0x5a8>
		__ticks = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9a a3       	std	Y+34, r25	; 0x22
    2136:	89 a3       	std	Y+33, r24	; 0x21
    2138:	3f c0       	rjmp	.+126    	; 0x21b8 <LCD_displayCharacter+0x626>
	else if (__tmp > 65535)
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	3f ef       	ldi	r19, 0xFF	; 255
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	57 e4       	ldi	r21, 0x47	; 71
    214a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	4c f5       	brge	.+82     	; 0x21a4 <LCD_displayCharacter+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	6f a1       	ldd	r22, Y+39	; 0x27
    2154:	78 a5       	ldd	r23, Y+40	; 0x28
    2156:	89 a5       	ldd	r24, Y+41	; 0x29
    2158:	9a a5       	ldd	r25, Y+42	; 0x2a
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e2       	ldi	r20, 0x20	; 32
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9a a3       	std	Y+34, r25	; 0x22
    2178:	89 a3       	std	Y+33, r24	; 0x21
    217a:	0f c0       	rjmp	.+30     	; 0x219a <LCD_displayCharacter+0x608>
    217c:	80 e9       	ldi	r24, 0x90	; 144
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	98 a3       	std	Y+32, r25	; 0x20
    2182:	8f 8f       	std	Y+31, r24	; 0x1f
    2184:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2186:	98 a1       	ldd	r25, Y+32	; 0x20
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_displayCharacter+0x5f6>
    218c:	98 a3       	std	Y+32, r25	; 0x20
    218e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	89 a1       	ldd	r24, Y+33	; 0x21
    2192:	9a a1       	ldd	r25, Y+34	; 0x22
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	89 a1       	ldd	r24, Y+33	; 0x21
    219c:	9a a1       	ldd	r25, Y+34	; 0x22
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	69 f7       	brne	.-38     	; 0x217c <LCD_displayCharacter+0x5ea>
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <LCD_displayCharacter+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a4:	6b a1       	ldd	r22, Y+35	; 0x23
    21a6:	7c a1       	ldd	r23, Y+36	; 0x24
    21a8:	8d a1       	ldd	r24, Y+37	; 0x25
    21aa:	9e a1       	ldd	r25, Y+38	; 0x26
    21ac:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9a a3       	std	Y+34, r25	; 0x22
    21b6:	89 a3       	std	Y+33, r24	; 0x21
    21b8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ba:	9a a1       	ldd	r25, Y+34	; 0x22
    21bc:	9e 8f       	std	Y+30, r25	; 0x1e
    21be:	8d 8f       	std	Y+29, r24	; 0x1d
    21c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_displayCharacter+0x632>
    21c8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	//lcd_port_value = 0;
	#ifdef LCD_LAST_PORT_PINS
		global_LCD = (global_LCD & 0x0F) | ((data & 0x0F) << 4);
    21cc:	80 91 2a 02 	lds	r24, 0x022A
    21d0:	28 2f       	mov	r18, r24
    21d2:	2f 70       	andi	r18, 0x0F	; 15
    21d4:	fe 01       	movw	r30, r28
    21d6:	ed 59       	subi	r30, 0x9D	; 157
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	82 95       	swap	r24
    21e2:	92 95       	swap	r25
    21e4:	90 7f       	andi	r25, 0xF0	; 240
    21e6:	98 27       	eor	r25, r24
    21e8:	80 7f       	andi	r24, 0xF0	; 240
    21ea:	98 27       	eor	r25, r24
    21ec:	82 2b       	or	r24, r18
    21ee:	80 93 2a 02 	sts	0x022A, r24
	#else
		global_LCD = (global_LCD & 0xF0) | (data & 0x0F);
	#endif
		PCF8574_write(global_LCD);
    21f2:	80 91 2a 02 	lds	r24, 0x022A
    21f6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a0 e8       	ldi	r26, 0x80	; 128
    2200:	bf e3       	ldi	r27, 0x3F	; 63
    2202:	89 8f       	std	Y+25, r24	; 0x19
    2204:	9a 8f       	std	Y+26, r25	; 0x1a
    2206:	ab 8f       	std	Y+27, r26	; 0x1b
    2208:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	69 8d       	ldd	r22, Y+25	; 0x19
    220c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a e7       	ldi	r20, 0x7A	; 122
    2218:	55 e4       	ldi	r21, 0x45	; 69
    221a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8d 8b       	std	Y+21, r24	; 0x15
    2224:	9e 8b       	std	Y+22, r25	; 0x16
    2226:	af 8b       	std	Y+23, r26	; 0x17
    2228:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <LCD_displayCharacter+0x6ba>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <LCD_displayCharacter+0x738>
	else if (__tmp > 65535)
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <LCD_displayCharacter+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	69 8d       	ldd	r22, Y+25	; 0x19
    2266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <LCD_displayCharacter+0x71a>
    228e:	80 e9       	ldi	r24, 0x90	; 144
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	9a 89       	ldd	r25, Y+18	; 0x12
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <LCD_displayCharacter+0x708>
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8b 89       	ldd	r24, Y+19	; 0x13
    22a4:	9c 89       	ldd	r25, Y+20	; 0x14
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <LCD_displayCharacter+0x6fc>
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <LCD_displayCharacter+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	98 89       	ldd	r25, Y+16	; 0x10
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <LCD_displayCharacter+0x744>
    22da:	98 8b       	std	Y+16, r25	; 0x10
    22dc:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(global_LCD,LCD_E_PIN_ID);
    22de:	80 91 2a 02 	lds	r24, 0x022A
    22e2:	8b 7f       	andi	r24, 0xFB	; 251
    22e4:	80 93 2a 02 	sts	0x022A, r24
		PCF8574_write(global_LCD);   /* Disable LCD E=0 */
    22e8:	80 91 2a 02 	lds	r24, 0x022A
    22ec:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PCF8574_write>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e8       	ldi	r26, 0x80	; 128
    22f6:	bf e3       	ldi	r27, 0x3F	; 63
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	9c 87       	std	Y+12, r25	; 0x0c
    22fc:	ad 87       	std	Y+13, r26	; 0x0d
    22fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a e7       	ldi	r20, 0x7A	; 122
    230e:	55 e4       	ldi	r21, 0x45	; 69
    2310:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	8f 83       	std	Y+7, r24	; 0x07
    231a:	98 87       	std	Y+8, r25	; 0x08
    231c:	a9 87       	std	Y+9, r26	; 0x09
    231e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <LCD_displayCharacter+0x7b0>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <LCD_displayCharacter+0x82e>
	else if (__tmp > 65535)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <LCD_displayCharacter+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <LCD_displayCharacter+0x810>
    2384:	80 e9       	ldi	r24, 0x90	; 144
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_displayCharacter+0x7fe>
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <LCD_displayCharacter+0x7f2>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <LCD_displayCharacter+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_displayCharacter+0x83a>
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
}
    23d4:	cd 59       	subi	r28, 0x9D	; 157
    23d6:	df 4f       	sbci	r29, 0xFF	; 255
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	08 95       	ret

000023ec <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <LCD_displayString+0x6>
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	9b 83       	std	Y+3, r25	; 0x03
    23fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23fc:	19 82       	std	Y+1, r1	; 0x01
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	fc 01       	movw	r30, r24
    240c:	e2 0f       	add	r30, r18
    240e:	f3 1f       	adc	r31, r19
    2410:	80 81       	ld	r24, Z
    2412:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
		i++;
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	8f 5f       	subi	r24, 0xFF	; 255
    241a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	fc 01       	movw	r30, r24
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	80 81       	ld	r24, Z
    242e:	88 23       	and	r24, r24
    2430:	39 f7       	brne	.-50     	; 0x2400 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <LCD_moveCursor+0x6>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <LCD_moveCursor+0x8>
    2446:	0f 92       	push	r0
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	3d 83       	std	Y+5, r19	; 0x05
    2458:	2c 83       	std	Y+4, r18	; 0x04
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	91 05       	cpc	r25, r1
    2462:	c1 f0       	breq	.+48     	; 0x2494 <LCD_moveCursor+0x56>
    2464:	2c 81       	ldd	r18, Y+4	; 0x04
    2466:	3d 81       	ldd	r19, Y+5	; 0x05
    2468:	22 30       	cpi	r18, 0x02	; 2
    246a:	31 05       	cpc	r19, r1
    246c:	2c f4       	brge	.+10     	; 0x2478 <LCD_moveCursor+0x3a>
    246e:	8c 81       	ldd	r24, Y+4	; 0x04
    2470:	9d 81       	ldd	r25, Y+5	; 0x05
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	61 f0       	breq	.+24     	; 0x248e <LCD_moveCursor+0x50>
    2476:	19 c0       	rjmp	.+50     	; 0x24aa <LCD_moveCursor+0x6c>
    2478:	2c 81       	ldd	r18, Y+4	; 0x04
    247a:	3d 81       	ldd	r19, Y+5	; 0x05
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	69 f0       	breq	.+26     	; 0x249c <LCD_moveCursor+0x5e>
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	9d 81       	ldd	r25, Y+5	; 0x05
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	91 05       	cpc	r25, r1
    248a:	61 f0       	breq	.+24     	; 0x24a4 <LCD_moveCursor+0x66>
    248c:	0e c0       	rjmp	.+28     	; 0x24aa <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	0b c0       	rjmp	.+22     	; 0x24aa <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	80 5c       	subi	r24, 0xC0	; 192
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	07 c0       	rjmp	.+14     	; 0x24aa <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	80 5f       	subi	r24, 0xF0	; 240
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	03 c0       	rjmp	.+6      	; 0x24aa <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	80 5b       	subi	r24, 0xB0	; 176
    24a8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	80 68       	ori	r24, 0x80	; 128
    24ae:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_sendCommand>
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <LCD_displayStringRowColumn+0x6>
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <LCD_displayStringRowColumn+0x8>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	6a 83       	std	Y+2, r22	; 0x02
    24d2:	5c 83       	std	Y+4, r21	; 0x04
    24d4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	6a 81       	ldd	r22, Y+2	; 0x02
    24da:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayString>
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	62 97       	sbiw	r28, 0x12	; 18
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	9a 8b       	std	Y+18, r25	; 0x12
    250a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    250c:	89 89       	ldd	r24, Y+17	; 0x11
    250e:	9a 89       	ldd	r25, Y+18	; 0x12
    2510:	9e 01       	movw	r18, r28
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	b9 01       	movw	r22, r18
    2518:	4a e0       	ldi	r20, 0x0A	; 10
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	0e 94 af 1b 	call	0x375e	; 0x375e <itoa>
   LCD_displayString(buff); /* Display the string */
    2520:	ce 01       	movw	r24, r28
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayString>
}
    2528:	62 96       	adiw	r28, 0x12	; 18
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_sendCommand>
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	00 d0       	rcall	.+0      	; 0x2554 <LM35_getTemperature+0x6>
    2554:	0f 92       	push	r0
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    255a:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    255c:	1a 82       	std	Y+2, r1	; 0x02
    255e:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ADC_readChannel>
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	cc 01       	movw	r24, r24
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	26 e9       	ldi	r18, 0x96	; 150
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 37 1b 	call	0x366e	; 0x366e <__mulsi3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 b3 04 	call	0x966	; 0x966 <__floatunsisf>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	2d ec       	ldi	r18, 0xCD	; 205
    259a:	3c ec       	ldi	r19, 0xCC	; 204
    259c:	4c e8       	ldi	r20, 0x8C	; 140
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 ed       	ldi	r19, 0xD0	; 208
    25b0:	4f eb       	ldi	r20, 0xBF	; 191
    25b2:	54 e4       	ldi	r21, 0x44	; 68
    25b4:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <main>:

UART_ConfigType UART_configuration = {EIGHT, DISABLED, ONE, 9600};
ADC_ConfigType ADC_Config = {INTERNAL_VOLT, F_CPU_16};

int main(void)
{
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	c0 59       	subi	r28, 0x90	; 144
    25e6:	d0 40       	sbci	r29, 0x00	; 0
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
	uint8 direction;
	uint8 Temp = 0;
    25f2:	fe 01       	movw	r30, r28
    25f4:	e3 57       	subi	r30, 0x73	; 115
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	10 82       	st	Z, r1

	UART_init(&UART_configuration);
    25fa:	80 e2       	ldi	r24, 0x20	; 32
    25fc:	92 e0       	ldi	r25, 0x02	; 2
    25fe:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <UART_init>
	ADC_init(&ADC_Config);
    2602:	87 e2       	ldi	r24, 0x27	; 39
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	0e 94 21 07 	call	0xe42	; 0xe42 <ADC_init>
	DcMotors_Init();
    260a:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotors_Init>
	TWI_init();
    260e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <TWI_init>
	LCD_init();
    2612:	0e 94 04 09 	call	0x1208	; 0x1208 <LCD_init>
	SREG  |= (1<<7);
    2616:	af e5       	ldi	r26, 0x5F	; 95
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	ef e5       	ldi	r30, 0x5F	; 95
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	8c 93       	st	X, r24
	DDRC &= (1<<PC2);
    2624:	a7 e2       	ldi	r26, 0x27	; 39
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e7 e2       	ldi	r30, 0x27	; 39
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	84 70       	andi	r24, 0x04	; 4
    2630:	8c 93       	st	X, r24

	LCD_clearScreen();
    2632:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_clearScreen>
	LCD_displayString("T1=   C");
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayString>
    263e:	fe 01       	movw	r30, r28
    2640:	e7 57       	subi	r30, 0x77	; 119
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a8 ec       	ldi	r26, 0xC8	; 200
    264a:	b2 e4       	ldi	r27, 0x42	; 66
    264c:	80 83       	st	Z, r24
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	a2 83       	std	Z+2, r26	; 0x02
    2652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	8e 01       	movw	r16, r28
    2656:	0b 57       	subi	r16, 0x7B	; 123
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	e7 57       	subi	r30, 0x77	; 119
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a e7       	ldi	r20, 0x7A	; 122
    266e:	55 e4       	ldi	r21, 0x45	; 69
    2670:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	80 83       	st	Z, r24
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	a2 83       	std	Z+2, r26	; 0x02
    2680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2682:	fe 01       	movw	r30, r28
    2684:	eb 57       	subi	r30, 0x7B	; 123
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	93 81       	ldd	r25, Z+3	; 0x03
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	44 f4       	brge	.+16     	; 0x26b0 <main+0xd8>
		__ticks = 1;
    26a0:	fe 01       	movw	r30, r28
    26a2:	ed 57       	subi	r30, 0x7D	; 125
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
    26ae:	64 c0       	rjmp	.+200    	; 0x2778 <main+0x1a0>
	else if (__tmp > 65535)
    26b0:	fe 01       	movw	r30, r28
    26b2:	eb 57       	subi	r30, 0x7B	; 123
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	0c f0       	brlt	.+2      	; 0x26d0 <main+0xf8>
    26ce:	43 c0       	rjmp	.+134    	; 0x2756 <main+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 57       	subi	r30, 0x77	; 119
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8e 01       	movw	r16, r28
    26f0:	0d 57       	subi	r16, 0x7D	; 125
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	f8 01       	movw	r30, r16
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	80 83       	st	Z, r24
    2706:	1f c0       	rjmp	.+62     	; 0x2746 <main+0x16e>
    2708:	fe 01       	movw	r30, r28
    270a:	ef 57       	subi	r30, 0x7F	; 127
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	80 e9       	ldi	r24, 0x90	; 144
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	fe 01       	movw	r30, r28
    2718:	ef 57       	subi	r30, 0x7F	; 127
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <main+0x148>
    2724:	fe 01       	movw	r30, r28
    2726:	ef 57       	subi	r30, 0x7F	; 127
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	de 01       	movw	r26, r28
    2730:	ad 57       	subi	r26, 0x7D	; 125
    2732:	bf 4f       	sbci	r27, 0xFF	; 255
    2734:	fe 01       	movw	r30, r28
    2736:	ed 57       	subi	r30, 0x7D	; 125
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	11 96       	adiw	r26, 0x01	; 1
    2742:	9c 93       	st	X, r25
    2744:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	fe 01       	movw	r30, r28
    2748:	ed 57       	subi	r30, 0x7D	; 125
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	d1 f6       	brne	.-76     	; 0x2708 <main+0x130>
    2754:	27 c0       	rjmp	.+78     	; 0x27a4 <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2756:	8e 01       	movw	r16, r28
    2758:	0d 57       	subi	r16, 0x7D	; 125
    275a:	1f 4f       	sbci	r17, 0xFF	; 255
    275c:	fe 01       	movw	r30, r28
    275e:	eb 57       	subi	r30, 0x7B	; 123
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	f8 01       	movw	r30, r16
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	de 01       	movw	r26, r28
    277a:	a1 58       	subi	r26, 0x81	; 129
    277c:	bf 4f       	sbci	r27, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	ed 57       	subi	r30, 0x7D	; 125
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	8d 93       	st	X+, r24
    278a:	9c 93       	st	X, r25
    278c:	fe 01       	movw	r30, r28
    278e:	e1 58       	subi	r30, 0x81	; 129
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <main+0x1be>
    279a:	fe 01       	movw	r30, r28
    279c:	e1 58       	subi	r30, 0x81	; 129
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_moveCursor(0,8);
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	68 e0       	ldi	r22, 0x08	; 8
    27a8:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_moveCursor>
	LCD_displayString("T2=   C");
    27ac:	88 e0       	ldi	r24, 0x08	; 8
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayString>
	/* Display this string "Temp =   C" only once on LCD at the second row*/
	LCD_moveCursor(1,0);
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_moveCursor>
	LCD_displayString("T3=   C");
    27bc:	80 e1       	ldi	r24, 0x10	; 16
    27be:	91 e0       	ldi	r25, 0x01	; 1
    27c0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayString>
    27c4:	fe 01       	movw	r30, r28
    27c6:	e5 58       	subi	r30, 0x85	; 133
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	a8 ec       	ldi	r26, 0xC8	; 200
    27d0:	b2 e4       	ldi	r27, 0x42	; 66
    27d2:	80 83       	st	Z, r24
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	a2 83       	std	Z+2, r26	; 0x02
    27d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	8e 01       	movw	r16, r28
    27dc:	09 58       	subi	r16, 0x89	; 137
    27de:	1f 4f       	sbci	r17, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	e5 58       	subi	r30, 0x85	; 133
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	4a e7       	ldi	r20, 0x7A	; 122
    27f4:	55 e4       	ldi	r21, 0x45	; 69
    27f6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	f8 01       	movw	r30, r16
    2800:	80 83       	st	Z, r24
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	a2 83       	std	Z+2, r26	; 0x02
    2806:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2808:	fe 01       	movw	r30, r28
    280a:	e9 58       	subi	r30, 0x89	; 137
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e8       	ldi	r20, 0x80	; 128
    281c:	5f e3       	ldi	r21, 0x3F	; 63
    281e:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2822:	88 23       	and	r24, r24
    2824:	44 f4       	brge	.+16     	; 0x2836 <main+0x25e>
		__ticks = 1;
    2826:	fe 01       	movw	r30, r28
    2828:	eb 58       	subi	r30, 0x8B	; 139
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
    2834:	64 c0       	rjmp	.+200    	; 0x28fe <main+0x326>
	else if (__tmp > 65535)
    2836:	fe 01       	movw	r30, r28
    2838:	e9 58       	subi	r30, 0x89	; 137
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	0c f0       	brlt	.+2      	; 0x2856 <main+0x27e>
    2854:	43 c0       	rjmp	.+134    	; 0x28dc <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	fe 01       	movw	r30, r28
    2858:	e5 58       	subi	r30, 0x85	; 133
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8e 01       	movw	r16, r28
    2876:	0b 58       	subi	r16, 0x8B	; 139
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	f8 01       	movw	r30, r16
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	1f c0       	rjmp	.+62     	; 0x28cc <main+0x2f4>
    288e:	fe 01       	movw	r30, r28
    2890:	ed 58       	subi	r30, 0x8D	; 141
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 e9       	ldi	r24, 0x90	; 144
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	fe 01       	movw	r30, r28
    289e:	ed 58       	subi	r30, 0x8D	; 141
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <main+0x2ce>
    28aa:	fe 01       	movw	r30, r28
    28ac:	ed 58       	subi	r30, 0x8D	; 141
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	de 01       	movw	r26, r28
    28b6:	ab 58       	subi	r26, 0x8B	; 139
    28b8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	eb 58       	subi	r30, 0x8B	; 139
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	11 96       	adiw	r26, 0x01	; 1
    28c8:	9c 93       	st	X, r25
    28ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28cc:	fe 01       	movw	r30, r28
    28ce:	eb 58       	subi	r30, 0x8B	; 139
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	d1 f6       	brne	.-76     	; 0x288e <main+0x2b6>
    28da:	27 c0       	rjmp	.+78     	; 0x292a <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28dc:	8e 01       	movw	r16, r28
    28de:	0b 58       	subi	r16, 0x8B	; 139
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	e9 58       	subi	r30, 0x89	; 137
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	f8 01       	movw	r30, r16
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24
    28fe:	de 01       	movw	r26, r28
    2900:	af 58       	subi	r26, 0x8F	; 143
    2902:	bf 4f       	sbci	r27, 0xFF	; 255
    2904:	fe 01       	movw	r30, r28
    2906:	eb 58       	subi	r30, 0x8B	; 139
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	8d 93       	st	X+, r24
    2910:	9c 93       	st	X, r25
    2912:	fe 01       	movw	r30, r28
    2914:	ef 58       	subi	r30, 0x8F	; 143
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <main+0x344>
    2920:	fe 01       	movw	r30, r28
    2922:	ef 58       	subi	r30, 0x8F	; 143
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
	_delay_ms(100);

	while(1){
		PORTB &= ~(1 << PB5);
    292a:	a5 e2       	ldi	r26, 0x25	; 37
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e5 e2       	ldi	r30, 0x25	; 37
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8f 7d       	andi	r24, 0xDF	; 223
    2936:	8c 93       	st	X, r24
		PORTB &= ~(1 << PB4);
    2938:	a5 e2       	ldi	r26, 0x25	; 37
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e5 e2       	ldi	r30, 0x25	; 37
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	8f 7e       	andi	r24, 0xEF	; 239
    2944:	8c 93       	st	X, r24
		/* Get the temperature value */
		Temp = LM35_getTemperature();
    2946:	0e 94 a7 12 	call	0x254e	; 0x254e <LM35_getTemperature>
    294a:	fe 01       	movw	r30, r28
    294c:	e3 57       	subi	r30, 0x73	; 115
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 83       	st	Z, r24
		LCD_moveCursor(0,3);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	63 e0       	ldi	r22, 0x03	; 3
    2956:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_moveCursor>
		if(Temp >= 100)
    295a:	fe 01       	movw	r30, r28
    295c:	e3 57       	subi	r30, 0x73	; 115
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	84 36       	cpi	r24, 0x64	; 100
    2964:	48 f0       	brcs	.+18     	; 0x2978 <main+0x3a0>
		{
			LCD_intgerToString(Temp);
    2966:	fe 01       	movw	r30, r28
    2968:	e3 57       	subi	r30, 0x73	; 115
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_intgerToString>
    2976:	0b c0       	rjmp	.+22     	; 0x298e <main+0x3b6>
		}else
		{
			LCD_displayCharacter(' ');
    2978:	80 e2       	ldi	r24, 0x20	; 32
    297a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
			LCD_intgerToString(Temp);
    297e:	fe 01       	movw	r30, r28
    2980:	e3 57       	subi	r30, 0x73	; 115
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_intgerToString>
    298e:	fe 01       	movw	r30, r28
    2990:	e3 59       	subi	r30, 0x93	; 147
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a8 ec       	ldi	r26, 0xC8	; 200
    299a:	b2 e4       	ldi	r27, 0x42	; 66
    299c:	80 83       	st	Z, r24
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	a2 83       	std	Z+2, r26	; 0x02
    29a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	8e 01       	movw	r16, r28
    29a6:	07 59       	subi	r16, 0x97	; 151
    29a8:	1f 4f       	sbci	r17, 0xFF	; 255
    29aa:	fe 01       	movw	r30, r28
    29ac:	e3 59       	subi	r30, 0x93	; 147
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	60 81       	ld	r22, Z
    29b2:	71 81       	ldd	r23, Z+1	; 0x01
    29b4:	82 81       	ldd	r24, Z+2	; 0x02
    29b6:	93 81       	ldd	r25, Z+3	; 0x03
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	4a e7       	ldi	r20, 0x7A	; 122
    29be:	55 e4       	ldi	r21, 0x45	; 69
    29c0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	f8 01       	movw	r30, r16
    29ca:	80 83       	st	Z, r24
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	a2 83       	std	Z+2, r26	; 0x02
    29d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29d2:	fe 01       	movw	r30, r28
    29d4:	e7 59       	subi	r30, 0x97	; 151
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	44 f4       	brge	.+16     	; 0x2a00 <main+0x428>
		__ticks = 1;
    29f0:	fe 01       	movw	r30, r28
    29f2:	e9 59       	subi	r30, 0x99	; 153
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
    29fe:	64 c0       	rjmp	.+200    	; 0x2ac8 <main+0x4f0>
	else if (__tmp > 65535)
    2a00:	fe 01       	movw	r30, r28
    2a02:	e7 59       	subi	r30, 0x97	; 151
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	0c f0       	brlt	.+2      	; 0x2a20 <main+0x448>
    2a1e:	43 c0       	rjmp	.+134    	; 0x2aa6 <main+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	fe 01       	movw	r30, r28
    2a22:	e3 59       	subi	r30, 0x93	; 147
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e2       	ldi	r20, 0x20	; 32
    2a34:	51 e4       	ldi	r21, 0x41	; 65
    2a36:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	8e 01       	movw	r16, r28
    2a40:	09 59       	subi	r16, 0x99	; 153
    2a42:	1f 4f       	sbci	r17, 0xFF	; 255
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	f8 01       	movw	r30, r16
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
    2a56:	1f c0       	rjmp	.+62     	; 0x2a96 <main+0x4be>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	eb 59       	subi	r30, 0x9B	; 155
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 e9       	ldi	r24, 0x90	; 144
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
    2a66:	fe 01       	movw	r30, r28
    2a68:	eb 59       	subi	r30, 0x9B	; 155
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <main+0x498>
    2a74:	fe 01       	movw	r30, r28
    2a76:	eb 59       	subi	r30, 0x9B	; 155
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7e:	de 01       	movw	r26, r28
    2a80:	a9 59       	subi	r26, 0x99	; 153
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	fe 01       	movw	r30, r28
    2a86:	e9 59       	subi	r30, 0x99	; 153
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	11 96       	adiw	r26, 0x01	; 1
    2a92:	9c 93       	st	X, r25
    2a94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a96:	fe 01       	movw	r30, r28
    2a98:	e9 59       	subi	r30, 0x99	; 153
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	d1 f6       	brne	.-76     	; 0x2a58 <main+0x480>
    2aa4:	27 c0       	rjmp	.+78     	; 0x2af4 <main+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	09 59       	subi	r16, 0x99	; 153
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	e7 59       	subi	r30, 0x97	; 151
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	de 01       	movw	r26, r28
    2aca:	ad 59       	subi	r26, 0x9D	; 157
    2acc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e9 59       	subi	r30, 0x99	; 153
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	8d 93       	st	X+, r24
    2ada:	9c 93       	st	X, r25
    2adc:	fe 01       	movw	r30, r28
    2ade:	ed 59       	subi	r30, 0x9D	; 157
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <main+0x50e>
    2aea:	fe 01       	movw	r30, r28
    2aec:	ed 59       	subi	r30, 0x9D	; 157
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
		}

		_delay_ms(100);
		PORTB |= (1 << PB5);
    2af4:	a5 e2       	ldi	r26, 0x25	; 37
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e5 e2       	ldi	r30, 0x25	; 37
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	80 62       	ori	r24, 0x20	; 32
    2b00:	8c 93       	st	X, r24
		PORTB &= ~(1 << PB4);
    2b02:	a5 e2       	ldi	r26, 0x25	; 37
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e5 e2       	ldi	r30, 0x25	; 37
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8f 7e       	andi	r24, 0xEF	; 239
    2b0e:	8c 93       	st	X, r24
		/* Get the temperature value */
		Temp = LM35_getTemperature();
    2b10:	0e 94 a7 12 	call	0x254e	; 0x254e <LM35_getTemperature>
    2b14:	fe 01       	movw	r30, r28
    2b16:	e3 57       	subi	r30, 0x73	; 115
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 83       	st	Z, r24
		LCD_moveCursor(0,11);
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	6b e0       	ldi	r22, 0x0B	; 11
    2b20:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_moveCursor>
		if(Temp >= 100)
    2b24:	fe 01       	movw	r30, r28
    2b26:	e3 57       	subi	r30, 0x73	; 115
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	84 36       	cpi	r24, 0x64	; 100
    2b2e:	48 f0       	brcs	.+18     	; 0x2b42 <main+0x56a>
		{
			LCD_intgerToString(Temp);
    2b30:	fe 01       	movw	r30, r28
    2b32:	e3 57       	subi	r30, 0x73	; 115
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_intgerToString>
    2b40:	0b c0       	rjmp	.+22     	; 0x2b58 <main+0x580>
		}else
		{
			LCD_displayCharacter(' ');
    2b42:	80 e2       	ldi	r24, 0x20	; 32
    2b44:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
			LCD_intgerToString(Temp);
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e3 57       	subi	r30, 0x73	; 115
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_intgerToString>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e1 5a       	subi	r30, 0xA1	; 161
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a8 ec       	ldi	r26, 0xC8	; 200
    2b64:	b2 e4       	ldi	r27, 0x42	; 66
    2b66:	80 83       	st	Z, r24
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	a2 83       	std	Z+2, r26	; 0x02
    2b6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6e:	8e 01       	movw	r16, r28
    2b70:	05 5a       	subi	r16, 0xA5	; 165
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	e1 5a       	subi	r30, 0xA1	; 161
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a e7       	ldi	r20, 0x7A	; 122
    2b88:	55 e4       	ldi	r21, 0x45	; 69
    2b8a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	f8 01       	movw	r30, r16
    2b94:	80 83       	st	Z, r24
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	a2 83       	std	Z+2, r26	; 0x02
    2b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e5 5a       	subi	r30, 0xA5	; 165
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	60 81       	ld	r22, Z
    2ba4:	71 81       	ldd	r23, Z+1	; 0x01
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	44 f4       	brge	.+16     	; 0x2bca <main+0x5f2>
		__ticks = 1;
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e7 5a       	subi	r30, 0xA7	; 167
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
    2bc8:	64 c0       	rjmp	.+200    	; 0x2c92 <main+0x6ba>
	else if (__tmp > 65535)
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e5 5a       	subi	r30, 0xA5	; 165
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	60 81       	ld	r22, Z
    2bd2:	71 81       	ldd	r23, Z+1	; 0x01
    2bd4:	82 81       	ldd	r24, Z+2	; 0x02
    2bd6:	93 81       	ldd	r25, Z+3	; 0x03
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	3f ef       	ldi	r19, 0xFF	; 255
    2bdc:	4f e7       	ldi	r20, 0x7F	; 127
    2bde:	57 e4       	ldi	r21, 0x47	; 71
    2be0:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2be4:	18 16       	cp	r1, r24
    2be6:	0c f0       	brlt	.+2      	; 0x2bea <main+0x612>
    2be8:	43 c0       	rjmp	.+134    	; 0x2c70 <main+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	fe 01       	movw	r30, r28
    2bec:	e1 5a       	subi	r30, 0xA1	; 161
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e2       	ldi	r20, 0x20	; 32
    2bfe:	51 e4       	ldi	r21, 0x41	; 65
    2c00:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8e 01       	movw	r16, r28
    2c0a:	07 5a       	subi	r16, 0xA7	; 167
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
    2c20:	1f c0       	rjmp	.+62     	; 0x2c60 <main+0x688>
    2c22:	fe 01       	movw	r30, r28
    2c24:	e9 5a       	subi	r30, 0xA9	; 169
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e9       	ldi	r24, 0x90	; 144
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    2c30:	fe 01       	movw	r30, r28
    2c32:	e9 5a       	subi	r30, 0xA9	; 169
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <main+0x662>
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e9 5a       	subi	r30, 0xA9	; 169
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c48:	de 01       	movw	r26, r28
    2c4a:	a7 5a       	subi	r26, 0xA7	; 167
    2c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e7 5a       	subi	r30, 0xA7	; 167
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	11 96       	adiw	r26, 0x01	; 1
    2c5c:	9c 93       	st	X, r25
    2c5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c60:	fe 01       	movw	r30, r28
    2c62:	e7 5a       	subi	r30, 0xA7	; 167
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	91 81       	ldd	r25, Z+1	; 0x01
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	d1 f6       	brne	.-76     	; 0x2c22 <main+0x64a>
    2c6e:	27 c0       	rjmp	.+78     	; 0x2cbe <main+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c70:	8e 01       	movw	r16, r28
    2c72:	07 5a       	subi	r16, 0xA7	; 167
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e5 5a       	subi	r30, 0xA5	; 165
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	f8 01       	movw	r30, r16
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
    2c92:	de 01       	movw	r26, r28
    2c94:	ab 5a       	subi	r26, 0xAB	; 171
    2c96:	bf 4f       	sbci	r27, 0xFF	; 255
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e7 5a       	subi	r30, 0xA7	; 167
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	8d 93       	st	X+, r24
    2ca4:	9c 93       	st	X, r25
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	eb 5a       	subi	r30, 0xAB	; 171
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <main+0x6d8>
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	eb 5a       	subi	r30, 0xAB	; 171
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
		}
		_delay_ms(100);
		PORTB |= (1 << PB4);
    2cbe:	a5 e2       	ldi	r26, 0x25	; 37
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e5 e2       	ldi	r30, 0x25	; 37
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	80 61       	ori	r24, 0x10	; 16
    2cca:	8c 93       	st	X, r24
		PORTB &= ~(1 << PB5);
    2ccc:	a5 e2       	ldi	r26, 0x25	; 37
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e5 e2       	ldi	r30, 0x25	; 37
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8f 7d       	andi	r24, 0xDF	; 223
    2cd8:	8c 93       	st	X, r24
		/* Get the temperature value */
		Temp = LM35_getTemperature();
    2cda:	0e 94 a7 12 	call	0x254e	; 0x254e <LM35_getTemperature>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e3 57       	subi	r30, 0x73	; 115
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 83       	st	Z, r24
		LCD_moveCursor(1,3);
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	63 e0       	ldi	r22, 0x03	; 3
    2cea:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_moveCursor>
		if(Temp >= 100)
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e3 57       	subi	r30, 0x73	; 115
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	84 36       	cpi	r24, 0x64	; 100
    2cf8:	48 f0       	brcs	.+18     	; 0x2d0c <main+0x734>
		{
			LCD_intgerToString(Temp);
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e3 57       	subi	r30, 0x73	; 115
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	88 2f       	mov	r24, r24
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_intgerToString>
    2d0a:	0b c0       	rjmp	.+22     	; 0x2d22 <main+0x74a>
		}else
		{
			LCD_displayCharacter(' ');
    2d0c:	80 e2       	ldi	r24, 0x20	; 32
    2d0e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
			LCD_intgerToString(Temp);
    2d12:	fe 01       	movw	r30, r28
    2d14:	e3 57       	subi	r30, 0x73	; 115
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_intgerToString>
    2d22:	fe 01       	movw	r30, r28
    2d24:	ef 5a       	subi	r30, 0xAF	; 175
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d2e:	b2 e4       	ldi	r27, 0x42	; 66
    2d30:	80 83       	st	Z, r24
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	a2 83       	std	Z+2, r26	; 0x02
    2d36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	8e 01       	movw	r16, r28
    2d3a:	03 5b       	subi	r16, 0xB3	; 179
    2d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ef 5a       	subi	r30, 0xAF	; 175
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	4a e7       	ldi	r20, 0x7A	; 122
    2d52:	55 e4       	ldi	r21, 0x45	; 69
    2d54:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	80 83       	st	Z, r24
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	a2 83       	std	Z+2, r26	; 0x02
    2d64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d66:	fe 01       	movw	r30, r28
    2d68:	e3 5b       	subi	r30, 0xB3	; 179
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	60 81       	ld	r22, Z
    2d6e:	71 81       	ldd	r23, Z+1	; 0x01
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e8       	ldi	r20, 0x80	; 128
    2d7a:	5f e3       	ldi	r21, 0x3F	; 63
    2d7c:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2d80:	88 23       	and	r24, r24
    2d82:	44 f4       	brge	.+16     	; 0x2d94 <main+0x7bc>
		__ticks = 1;
    2d84:	fe 01       	movw	r30, r28
    2d86:	e5 5b       	subi	r30, 0xB5	; 181
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
    2d92:	64 c0       	rjmp	.+200    	; 0x2e5c <main+0x884>
	else if (__tmp > 65535)
    2d94:	fe 01       	movw	r30, r28
    2d96:	e3 5b       	subi	r30, 0xB3	; 179
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	0c f0       	brlt	.+2      	; 0x2db4 <main+0x7dc>
    2db2:	43 c0       	rjmp	.+134    	; 0x2e3a <main+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	fe 01       	movw	r30, r28
    2db6:	ef 5a       	subi	r30, 0xAF	; 175
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e2       	ldi	r20, 0x20	; 32
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8e 01       	movw	r16, r28
    2dd4:	05 5b       	subi	r16, 0xB5	; 181
    2dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	f8 01       	movw	r30, r16
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
    2dea:	1f c0       	rjmp	.+62     	; 0x2e2a <main+0x852>
    2dec:	fe 01       	movw	r30, r28
    2dee:	e7 5b       	subi	r30, 0xB7	; 183
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 e9       	ldi	r24, 0x90	; 144
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	80 83       	st	Z, r24
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e7 5b       	subi	r30, 0xB7	; 183
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <main+0x82c>
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e7 5b       	subi	r30, 0xB7	; 183
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	91 83       	std	Z+1, r25	; 0x01
    2e10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e12:	de 01       	movw	r26, r28
    2e14:	a5 5b       	subi	r26, 0xB5	; 181
    2e16:	bf 4f       	sbci	r27, 0xFF	; 255
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e5 5b       	subi	r30, 0xB5	; 181
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	11 96       	adiw	r26, 0x01	; 1
    2e26:	9c 93       	st	X, r25
    2e28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e5 5b       	subi	r30, 0xB5	; 181
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	d1 f6       	brne	.-76     	; 0x2dec <main+0x814>
    2e38:	28 c0       	rjmp	.+80     	; 0x2e8a <main+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	05 5b       	subi	r16, 0xB5	; 181
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	fe 01       	movw	r30, r28
    2e42:	e3 5b       	subi	r30, 0xB3	; 179
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	f8 01       	movw	r30, r16
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	80 83       	st	Z, r24
    2e5c:	de 01       	movw	r26, r28
    2e5e:	a9 5b       	subi	r26, 0xB9	; 185
    2e60:	bf 4f       	sbci	r27, 0xFF	; 255
    2e62:	fe 01       	movw	r30, r28
    2e64:	e5 5b       	subi	r30, 0xB5	; 181
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	11 96       	adiw	r26, 0x01	; 1
    2e6e:	9c 93       	st	X, r25
    2e70:	8e 93       	st	-X, r24
    2e72:	fe 01       	movw	r30, r28
    2e74:	e9 5b       	subi	r30, 0xB9	; 185
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <main+0x8a4>
    2e80:	fe 01       	movw	r30, r28
    2e82:	e9 5b       	subi	r30, 0xB9	; 185
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	80 83       	st	Z, r24
		}
		_delay_ms(100);
		if (UCSR0A & (1 << RXC0)) {
    2e8a:	e0 ec       	ldi	r30, 0xC0	; 192
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	0c f0       	brlt	.+2      	; 0x2e96 <main+0x8be>
    2e94:	4a cd       	rjmp	.-1388   	; 0x292a <main+0x352>
			direction = UART_recieveByte();
    2e96:	0e 94 28 1b 	call	0x3650	; 0x3650 <UART_recieveByte>
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e2 57       	subi	r30, 0x72	; 114
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 83       	st	Z, r24
			Car_Move(CAR_STOP);
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Car_Move>
			switch(direction){
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e2 57       	subi	r30, 0x72	; 114
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	c1 57       	subi	r28, 0x71	; 113
    2eb6:	df 4f       	sbci	r29, 0xFF	; 255
    2eb8:	39 83       	std	Y+1, r19	; 0x01
    2eba:	28 83       	st	Y, r18
    2ebc:	cf 58       	subi	r28, 0x8F	; 143
    2ebe:	d0 40       	sbci	r29, 0x00	; 0
    2ec0:	c1 57       	subi	r28, 0x71	; 113
    2ec2:	df 4f       	sbci	r29, 0xFF	; 255
    2ec4:	88 81       	ld	r24, Y
    2ec6:	99 81       	ldd	r25, Y+1	; 0x01
    2ec8:	cf 58       	subi	r28, 0x8F	; 143
    2eca:	d0 40       	sbci	r29, 0x00	; 0
    2ecc:	86 34       	cpi	r24, 0x46	; 70
    2ece:	91 05       	cpc	r25, r1
    2ed0:	49 f1       	breq	.+82     	; 0x2f24 <main+0x94c>
    2ed2:	c1 57       	subi	r28, 0x71	; 113
    2ed4:	df 4f       	sbci	r29, 0xFF	; 255
    2ed6:	e8 81       	ld	r30, Y
    2ed8:	f9 81       	ldd	r31, Y+1	; 0x01
    2eda:	cf 58       	subi	r28, 0x8F	; 143
    2edc:	d0 40       	sbci	r29, 0x00	; 0
    2ede:	e7 34       	cpi	r30, 0x47	; 71
    2ee0:	f1 05       	cpc	r31, r1
    2ee2:	5c f4       	brge	.+22     	; 0x2efa <main+0x922>
    2ee4:	c1 57       	subi	r28, 0x71	; 113
    2ee6:	df 4f       	sbci	r29, 0xFF	; 255
    2ee8:	28 81       	ld	r18, Y
    2eea:	39 81       	ldd	r19, Y+1	; 0x01
    2eec:	cf 58       	subi	r28, 0x8F	; 143
    2eee:	d0 40       	sbci	r29, 0x00	; 0
    2ef0:	22 34       	cpi	r18, 0x42	; 66
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <main+0x920>
    2ef6:	9f c0       	rjmp	.+318    	; 0x3036 <main+0xa5e>
    2ef8:	00 c2       	rjmp	.+1024   	; 0x32fa <main+0xd22>
    2efa:	c1 57       	subi	r28, 0x71	; 113
    2efc:	df 4f       	sbci	r29, 0xFF	; 255
    2efe:	88 81       	ld	r24, Y
    2f00:	99 81       	ldd	r25, Y+1	; 0x01
    2f02:	cf 58       	subi	r28, 0x8F	; 143
    2f04:	d0 40       	sbci	r29, 0x00	; 0
    2f06:	8c 34       	cpi	r24, 0x4C	; 76
    2f08:	91 05       	cpc	r25, r1
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <main+0x936>
    2f0c:	80 c1       	rjmp	.+768    	; 0x320e <main+0xc36>
    2f0e:	c1 57       	subi	r28, 0x71	; 113
    2f10:	df 4f       	sbci	r29, 0xFF	; 255
    2f12:	e8 81       	ld	r30, Y
    2f14:	f9 81       	ldd	r31, Y+1	; 0x01
    2f16:	cf 58       	subi	r28, 0x8F	; 143
    2f18:	d0 40       	sbci	r29, 0x00	; 0
    2f1a:	e2 35       	cpi	r30, 0x52	; 82
    2f1c:	f1 05       	cpc	r31, r1
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <main+0x94a>
    2f20:	00 c1       	rjmp	.+512    	; 0x3122 <main+0xb4a>
    2f22:	eb c1       	rjmp	.+982    	; 0x32fa <main+0xd22>
			case 'F': // move forward
				Car_Move(CAR_FORWARD); // move the car forward at the specified speed
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Car_Move>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ed 5b       	subi	r30, 0xBD	; 189
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a0 e2       	ldi	r26, 0x20	; 32
    2f36:	b1 e4       	ldi	r27, 0x41	; 65
    2f38:	80 83       	st	Z, r24
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	a2 83       	std	Z+2, r26	; 0x02
    2f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	8e 01       	movw	r16, r28
    2f42:	01 5c       	subi	r16, 0xC1	; 193
    2f44:	1f 4f       	sbci	r17, 0xFF	; 255
    2f46:	fe 01       	movw	r30, r28
    2f48:	ed 5b       	subi	r30, 0xBD	; 189
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	4a e7       	ldi	r20, 0x7A	; 122
    2f5a:	55 e4       	ldi	r21, 0x45	; 69
    2f5c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	80 83       	st	Z, r24
    2f68:	91 83       	std	Z+1, r25	; 0x01
    2f6a:	a2 83       	std	Z+2, r26	; 0x02
    2f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ff 96       	adiw	r30, 0x3f	; 63
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e8       	ldi	r20, 0x80	; 128
    2f80:	5f e3       	ldi	r21, 0x3F	; 63
    2f82:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2f86:	88 23       	and	r24, r24
    2f88:	2c f4       	brge	.+10     	; 0x2f94 <main+0x9bc>
		__ticks = 1;
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	9e af       	std	Y+62, r25	; 0x3e
    2f90:	8d af       	std	Y+61, r24	; 0x3d
    2f92:	46 c0       	rjmp	.+140    	; 0x3020 <main+0xa48>
	else if (__tmp > 65535)
    2f94:	fe 01       	movw	r30, r28
    2f96:	ff 96       	adiw	r30, 0x3f	; 63
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	64 f5       	brge	.+88     	; 0x3008 <main+0xa30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	ed 5b       	subi	r30, 0xBD	; 189
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e af       	std	Y+62, r25	; 0x3e
    2fdc:	8d af       	std	Y+61, r24	; 0x3d
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <main+0xa26>
    2fe0:	80 e9       	ldi	r24, 0x90	; 144
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	9c af       	std	Y+60, r25	; 0x3c
    2fe6:	8b af       	std	Y+59, r24	; 0x3b
    2fe8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fea:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <main+0xa14>
    2ff0:	9c af       	std	Y+60, r25	; 0x3c
    2ff2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	9e af       	std	Y+62, r25	; 0x3e
    2ffc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3000:	9e ad       	ldd	r25, Y+62	; 0x3e
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <main+0xa08>
    3006:	91 cc       	rjmp	.-1758   	; 0x292a <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3008:	fe 01       	movw	r30, r28
    300a:	ff 96       	adiw	r30, 0x3f	; 63
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9e af       	std	Y+62, r25	; 0x3e
    301e:	8d af       	std	Y+61, r24	; 0x3d
    3020:	8d ad       	ldd	r24, Y+61	; 0x3d
    3022:	9e ad       	ldd	r25, Y+62	; 0x3e
    3024:	9a af       	std	Y+58, r25	; 0x3a
    3026:	89 af       	std	Y+57, r24	; 0x39
    3028:	89 ad       	ldd	r24, Y+57	; 0x39
    302a:	9a ad       	ldd	r25, Y+58	; 0x3a
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <main+0xa54>
    3030:	9a af       	std	Y+58, r25	; 0x3a
    3032:	89 af       	std	Y+57, r24	; 0x39
    3034:	7a cc       	rjmp	.-1804   	; 0x292a <main+0x352>
				_delay_ms(10);
				break;

			case 'B': // move backward
				Car_Move(CAR_BACKWARD); // move the car backward at the specified speed
    3036:	82 e0       	ldi	r24, 0x02	; 2
    3038:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Car_Move>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	a0 e2       	ldi	r26, 0x20	; 32
    3042:	b1 e4       	ldi	r27, 0x41	; 65
    3044:	8d ab       	std	Y+53, r24	; 0x35
    3046:	9e ab       	std	Y+54, r25	; 0x36
    3048:	af ab       	std	Y+55, r26	; 0x37
    304a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304c:	6d a9       	ldd	r22, Y+53	; 0x35
    304e:	7e a9       	ldd	r23, Y+54	; 0x36
    3050:	8f a9       	ldd	r24, Y+55	; 0x37
    3052:	98 ad       	ldd	r25, Y+56	; 0x38
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a e7       	ldi	r20, 0x7A	; 122
    305a:	55 e4       	ldi	r21, 0x45	; 69
    305c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	89 ab       	std	Y+49, r24	; 0x31
    3066:	9a ab       	std	Y+50, r25	; 0x32
    3068:	ab ab       	std	Y+51, r26	; 0x33
    306a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    306c:	69 a9       	ldd	r22, Y+49	; 0x31
    306e:	7a a9       	ldd	r23, Y+50	; 0x32
    3070:	8b a9       	ldd	r24, Y+51	; 0x33
    3072:	9c a9       	ldd	r25, Y+52	; 0x34
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e8       	ldi	r20, 0x80	; 128
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    3080:	88 23       	and	r24, r24
    3082:	2c f4       	brge	.+10     	; 0x308e <main+0xab6>
		__ticks = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	98 ab       	std	Y+48, r25	; 0x30
    308a:	8f a7       	std	Y+47, r24	; 0x2f
    308c:	3f c0       	rjmp	.+126    	; 0x310c <main+0xb34>
	else if (__tmp > 65535)
    308e:	69 a9       	ldd	r22, Y+49	; 0x31
    3090:	7a a9       	ldd	r23, Y+50	; 0x32
    3092:	8b a9       	ldd	r24, Y+51	; 0x33
    3094:	9c a9       	ldd	r25, Y+52	; 0x34
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	3f ef       	ldi	r19, 0xFF	; 255
    309a:	4f e7       	ldi	r20, 0x7F	; 127
    309c:	57 e4       	ldi	r21, 0x47	; 71
    309e:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    30a2:	18 16       	cp	r1, r24
    30a4:	4c f5       	brge	.+82     	; 0x30f8 <main+0xb20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a6:	6d a9       	ldd	r22, Y+53	; 0x35
    30a8:	7e a9       	ldd	r23, Y+54	; 0x36
    30aa:	8f a9       	ldd	r24, Y+55	; 0x37
    30ac:	98 ad       	ldd	r25, Y+56	; 0x38
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e2       	ldi	r20, 0x20	; 32
    30b4:	51 e4       	ldi	r21, 0x41	; 65
    30b6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	98 ab       	std	Y+48, r25	; 0x30
    30cc:	8f a7       	std	Y+47, r24	; 0x2f
    30ce:	0f c0       	rjmp	.+30     	; 0x30ee <main+0xb16>
    30d0:	80 e9       	ldi	r24, 0x90	; 144
    30d2:	91 e0       	ldi	r25, 0x01	; 1
    30d4:	9e a7       	std	Y+46, r25	; 0x2e
    30d6:	8d a7       	std	Y+45, r24	; 0x2d
    30d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30da:	9e a5       	ldd	r25, Y+46	; 0x2e
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <main+0xb04>
    30e0:	9e a7       	std	Y+46, r25	; 0x2e
    30e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e6:	98 a9       	ldd	r25, Y+48	; 0x30
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	98 ab       	std	Y+48, r25	; 0x30
    30ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f0:	98 a9       	ldd	r25, Y+48	; 0x30
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <main+0xaf8>
    30f6:	19 cc       	rjmp	.-1998   	; 0x292a <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f8:	69 a9       	ldd	r22, Y+49	; 0x31
    30fa:	7a a9       	ldd	r23, Y+50	; 0x32
    30fc:	8b a9       	ldd	r24, Y+51	; 0x33
    30fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3100:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	98 ab       	std	Y+48, r25	; 0x30
    310a:	8f a7       	std	Y+47, r24	; 0x2f
    310c:	8f a5       	ldd	r24, Y+47	; 0x2f
    310e:	98 a9       	ldd	r25, Y+48	; 0x30
    3110:	9c a7       	std	Y+44, r25	; 0x2c
    3112:	8b a7       	std	Y+43, r24	; 0x2b
    3114:	8b a5       	ldd	r24, Y+43	; 0x2b
    3116:	9c a5       	ldd	r25, Y+44	; 0x2c
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <main+0xb40>
    311c:	9c a7       	std	Y+44, r25	; 0x2c
    311e:	8b a7       	std	Y+43, r24	; 0x2b
    3120:	04 cc       	rjmp	.-2040   	; 0x292a <main+0x352>
				_delay_ms(10);
				break;

			case 'R': // turn right
				Car_Move(CAR_RIGHT); // turn the car right at the specified speed
    3122:	84 e0       	ldi	r24, 0x04	; 4
    3124:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Car_Move>
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	a0 e2       	ldi	r26, 0x20	; 32
    312e:	b1 e4       	ldi	r27, 0x41	; 65
    3130:	8f a3       	std	Y+39, r24	; 0x27
    3132:	98 a7       	std	Y+40, r25	; 0x28
    3134:	a9 a7       	std	Y+41, r26	; 0x29
    3136:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3138:	6f a1       	ldd	r22, Y+39	; 0x27
    313a:	78 a5       	ldd	r23, Y+40	; 0x28
    313c:	89 a5       	ldd	r24, Y+41	; 0x29
    313e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a e7       	ldi	r20, 0x7A	; 122
    3146:	55 e4       	ldi	r21, 0x45	; 69
    3148:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	8b a3       	std	Y+35, r24	; 0x23
    3152:	9c a3       	std	Y+36, r25	; 0x24
    3154:	ad a3       	std	Y+37, r26	; 0x25
    3156:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3158:	6b a1       	ldd	r22, Y+35	; 0x23
    315a:	7c a1       	ldd	r23, Y+36	; 0x24
    315c:	8d a1       	ldd	r24, Y+37	; 0x25
    315e:	9e a1       	ldd	r25, Y+38	; 0x26
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	2c f4       	brge	.+10     	; 0x317a <main+0xba2>
		__ticks = 1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9a a3       	std	Y+34, r25	; 0x22
    3176:	89 a3       	std	Y+33, r24	; 0x21
    3178:	3f c0       	rjmp	.+126    	; 0x31f8 <main+0xc20>
	else if (__tmp > 65535)
    317a:	6b a1       	ldd	r22, Y+35	; 0x23
    317c:	7c a1       	ldd	r23, Y+36	; 0x24
    317e:	8d a1       	ldd	r24, Y+37	; 0x25
    3180:	9e a1       	ldd	r25, Y+38	; 0x26
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	3f ef       	ldi	r19, 0xFF	; 255
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	57 e4       	ldi	r21, 0x47	; 71
    318a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	4c f5       	brge	.+82     	; 0x31e4 <main+0xc0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3192:	6f a1       	ldd	r22, Y+39	; 0x27
    3194:	78 a5       	ldd	r23, Y+40	; 0x28
    3196:	89 a5       	ldd	r24, Y+41	; 0x29
    3198:	9a a5       	ldd	r25, Y+42	; 0x2a
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e2       	ldi	r20, 0x20	; 32
    31a0:	51 e4       	ldi	r21, 0x41	; 65
    31a2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	9a a3       	std	Y+34, r25	; 0x22
    31b8:	89 a3       	std	Y+33, r24	; 0x21
    31ba:	0f c0       	rjmp	.+30     	; 0x31da <main+0xc02>
    31bc:	80 e9       	ldi	r24, 0x90	; 144
    31be:	91 e0       	ldi	r25, 0x01	; 1
    31c0:	98 a3       	std	Y+32, r25	; 0x20
    31c2:	8f 8f       	std	Y+31, r24	; 0x1f
    31c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31c6:	98 a1       	ldd	r25, Y+32	; 0x20
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <main+0xbf0>
    31cc:	98 a3       	std	Y+32, r25	; 0x20
    31ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d0:	89 a1       	ldd	r24, Y+33	; 0x21
    31d2:	9a a1       	ldd	r25, Y+34	; 0x22
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	9a a3       	std	Y+34, r25	; 0x22
    31d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31da:	89 a1       	ldd	r24, Y+33	; 0x21
    31dc:	9a a1       	ldd	r25, Y+34	; 0x22
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	69 f7       	brne	.-38     	; 0x31bc <main+0xbe4>
    31e2:	a3 cb       	rjmp	.-2234   	; 0x292a <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e4:	6b a1       	ldd	r22, Y+35	; 0x23
    31e6:	7c a1       	ldd	r23, Y+36	; 0x24
    31e8:	8d a1       	ldd	r24, Y+37	; 0x25
    31ea:	9e a1       	ldd	r25, Y+38	; 0x26
    31ec:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9a a3       	std	Y+34, r25	; 0x22
    31f6:	89 a3       	std	Y+33, r24	; 0x21
    31f8:	89 a1       	ldd	r24, Y+33	; 0x21
    31fa:	9a a1       	ldd	r25, Y+34	; 0x22
    31fc:	9e 8f       	std	Y+30, r25	; 0x1e
    31fe:	8d 8f       	std	Y+29, r24	; 0x1d
    3200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <main+0xc2c>
    3208:	9e 8f       	std	Y+30, r25	; 0x1e
    320a:	8d 8f       	std	Y+29, r24	; 0x1d
    320c:	8e cb       	rjmp	.-2276   	; 0x292a <main+0x352>
				_delay_ms(10);
				break;

			case 'L': // turn left
				Car_Move(CAR_LEFT); // turn the car left at the specified speed
    320e:	83 e0       	ldi	r24, 0x03	; 3
    3210:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Car_Move>
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a0 e2       	ldi	r26, 0x20	; 32
    321a:	b1 e4       	ldi	r27, 0x41	; 65
    321c:	89 8f       	std	Y+25, r24	; 0x19
    321e:	9a 8f       	std	Y+26, r25	; 0x1a
    3220:	ab 8f       	std	Y+27, r26	; 0x1b
    3222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3224:	69 8d       	ldd	r22, Y+25	; 0x19
    3226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	4a e7       	ldi	r20, 0x7A	; 122
    3232:	55 e4       	ldi	r21, 0x45	; 69
    3234:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	8d 8b       	std	Y+21, r24	; 0x15
    323e:	9e 8b       	std	Y+22, r25	; 0x16
    3240:	af 8b       	std	Y+23, r26	; 0x17
    3242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3244:	6d 89       	ldd	r22, Y+21	; 0x15
    3246:	7e 89       	ldd	r23, Y+22	; 0x16
    3248:	8f 89       	ldd	r24, Y+23	; 0x17
    324a:	98 8d       	ldd	r25, Y+24	; 0x18
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e8       	ldi	r20, 0x80	; 128
    3252:	5f e3       	ldi	r21, 0x3F	; 63
    3254:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    3258:	88 23       	and	r24, r24
    325a:	2c f4       	brge	.+10     	; 0x3266 <main+0xc8e>
		__ticks = 1;
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	9c 8b       	std	Y+20, r25	; 0x14
    3262:	8b 8b       	std	Y+19, r24	; 0x13
    3264:	3f c0       	rjmp	.+126    	; 0x32e4 <main+0xd0c>
	else if (__tmp > 65535)
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	3f ef       	ldi	r19, 0xFF	; 255
    3272:	4f e7       	ldi	r20, 0x7F	; 127
    3274:	57 e4       	ldi	r21, 0x47	; 71
    3276:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    327a:	18 16       	cp	r1, r24
    327c:	4c f5       	brge	.+82     	; 0x32d0 <main+0xcf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327e:	69 8d       	ldd	r22, Y+25	; 0x19
    3280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	40 e2       	ldi	r20, 0x20	; 32
    328c:	51 e4       	ldi	r21, 0x41	; 65
    328e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	bc 01       	movw	r22, r24
    3298:	cd 01       	movw	r24, r26
    329a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	9c 8b       	std	Y+20, r25	; 0x14
    32a4:	8b 8b       	std	Y+19, r24	; 0x13
    32a6:	0f c0       	rjmp	.+30     	; 0x32c6 <main+0xcee>
    32a8:	80 e9       	ldi	r24, 0x90	; 144
    32aa:	91 e0       	ldi	r25, 0x01	; 1
    32ac:	9a 8b       	std	Y+18, r25	; 0x12
    32ae:	89 8b       	std	Y+17, r24	; 0x11
    32b0:	89 89       	ldd	r24, Y+17	; 0x11
    32b2:	9a 89       	ldd	r25, Y+18	; 0x12
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <main+0xcdc>
    32b8:	9a 8b       	std	Y+18, r25	; 0x12
    32ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32bc:	8b 89       	ldd	r24, Y+19	; 0x13
    32be:	9c 89       	ldd	r25, Y+20	; 0x14
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	9c 8b       	std	Y+20, r25	; 0x14
    32c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c6:	8b 89       	ldd	r24, Y+19	; 0x13
    32c8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ca:	00 97       	sbiw	r24, 0x00	; 0
    32cc:	69 f7       	brne	.-38     	; 0x32a8 <main+0xcd0>
    32ce:	2d cb       	rjmp	.-2470   	; 0x292a <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d0:	6d 89       	ldd	r22, Y+21	; 0x15
    32d2:	7e 89       	ldd	r23, Y+22	; 0x16
    32d4:	8f 89       	ldd	r24, Y+23	; 0x17
    32d6:	98 8d       	ldd	r25, Y+24	; 0x18
    32d8:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	9c 8b       	std	Y+20, r25	; 0x14
    32e2:	8b 8b       	std	Y+19, r24	; 0x13
    32e4:	8b 89       	ldd	r24, Y+19	; 0x13
    32e6:	9c 89       	ldd	r25, Y+20	; 0x14
    32e8:	98 8b       	std	Y+16, r25	; 0x10
    32ea:	8f 87       	std	Y+15, r24	; 0x0f
    32ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ee:	98 89       	ldd	r25, Y+16	; 0x10
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <main+0xd18>
    32f4:	98 8b       	std	Y+16, r25	; 0x10
    32f6:	8f 87       	std	Y+15, r24	; 0x0f
    32f8:	18 cb       	rjmp	.-2512   	; 0x292a <main+0x352>
				_delay_ms(10);
				break;

			default: // stop the car
				Car_Move(CAR_STOP); // stop the car
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Car_Move>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	a0 e2       	ldi	r26, 0x20	; 32
    3306:	b1 e4       	ldi	r27, 0x41	; 65
    3308:	8b 87       	std	Y+11, r24	; 0x0b
    330a:	9c 87       	std	Y+12, r25	; 0x0c
    330c:	ad 87       	std	Y+13, r26	; 0x0d
    330e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3310:	6b 85       	ldd	r22, Y+11	; 0x0b
    3312:	7c 85       	ldd	r23, Y+12	; 0x0c
    3314:	8d 85       	ldd	r24, Y+13	; 0x0d
    3316:	9e 85       	ldd	r25, Y+14	; 0x0e
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4a e7       	ldi	r20, 0x7A	; 122
    331e:	55 e4       	ldi	r21, 0x45	; 69
    3320:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	8f 83       	std	Y+7, r24	; 0x07
    332a:	98 87       	std	Y+8, r25	; 0x08
    332c:	a9 87       	std	Y+9, r26	; 0x09
    332e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3330:	6f 81       	ldd	r22, Y+7	; 0x07
    3332:	78 85       	ldd	r23, Y+8	; 0x08
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e8       	ldi	r20, 0x80	; 128
    333e:	5f e3       	ldi	r21, 0x3F	; 63
    3340:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    3344:	88 23       	and	r24, r24
    3346:	2c f4       	brge	.+10     	; 0x3352 <main+0xd7a>
		__ticks = 1;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	8d 83       	std	Y+5, r24	; 0x05
    3350:	3f c0       	rjmp	.+126    	; 0x33d0 <main+0xdf8>
	else if (__tmp > 65535)
    3352:	6f 81       	ldd	r22, Y+7	; 0x07
    3354:	78 85       	ldd	r23, Y+8	; 0x08
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	3f ef       	ldi	r19, 0xFF	; 255
    335e:	4f e7       	ldi	r20, 0x7F	; 127
    3360:	57 e4       	ldi	r21, 0x47	; 71
    3362:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    3366:	18 16       	cp	r1, r24
    3368:	4c f5       	brge	.+82     	; 0x33bc <main+0xde4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	6b 85       	ldd	r22, Y+11	; 0x0b
    336c:	7c 85       	ldd	r23, Y+12	; 0x0c
    336e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3370:	9e 85       	ldd	r25, Y+14	; 0x0e
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e2       	ldi	r20, 0x20	; 32
    3378:	51 e4       	ldi	r21, 0x41	; 65
    337a:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	8d 83       	std	Y+5, r24	; 0x05
    3392:	0f c0       	rjmp	.+30     	; 0x33b2 <main+0xdda>
    3394:	80 e9       	ldi	r24, 0x90	; 144
    3396:	91 e0       	ldi	r25, 0x01	; 1
    3398:	9c 83       	std	Y+4, r25	; 0x04
    339a:	8b 83       	std	Y+3, r24	; 0x03
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	9c 81       	ldd	r25, Y+4	; 0x04
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <main+0xdc8>
    33a4:	9c 83       	std	Y+4, r25	; 0x04
    33a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a8:	8d 81       	ldd	r24, Y+5	; 0x05
    33aa:	9e 81       	ldd	r25, Y+6	; 0x06
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	9e 83       	std	Y+6, r25	; 0x06
    33b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b2:	8d 81       	ldd	r24, Y+5	; 0x05
    33b4:	9e 81       	ldd	r25, Y+6	; 0x06
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	69 f7       	brne	.-38     	; 0x3394 <main+0xdbc>
    33ba:	b7 ca       	rjmp	.-2706   	; 0x292a <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33bc:	6f 81       	ldd	r22, Y+7	; 0x07
    33be:	78 85       	ldd	r23, Y+8	; 0x08
    33c0:	89 85       	ldd	r24, Y+9	; 0x09
    33c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	9a 81       	ldd	r25, Y+2	; 0x02
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <main+0xe04>
    33e0:	9a 83       	std	Y+2, r25	; 0x02
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	a2 ca       	rjmp	.-2748   	; 0x292a <main+0x352>

000033e6 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using (pre-scaler=1 -->TWPS=00) and F_CPU=16Mhz */
    TWBR = 0x0C;
    33ee:	e8 eb       	ldi	r30, 0xB8	; 184
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	8c e0       	ldi	r24, 0x0C	; 12
    33f4:	80 83       	st	Z, r24
	TWSR = 0x00;
    33f6:	e9 eb       	ldi	r30, 0xB9	; 185
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me:
     * bits(7:1) 0x1 (used in case this MC is a slave device)
     * bit 0: General Call Recognition: Off
     */
    TWAR = 0b00000010; // my address = 0x01 :)
    33fc:	ea eb       	ldi	r30, 0xBA	; 186
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    3404:	ec eb       	ldi	r30, 0xBC	; 188
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	84 e0       	ldi	r24, 0x04	; 4
    340a:	80 83       	st	Z, r24
}
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <TWI_start>:

void TWI_start(void)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1 (not cleared automatically)
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    341a:	ec eb       	ldi	r30, 0xBC	; 188
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	84 ea       	ldi	r24, 0xA4	; 164
    3420:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3422:	ec eb       	ldi	r30, 0xBC	; 188
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	88 23       	and	r24, r24
    342a:	dc f7       	brge	.-10     	; 0x3422 <TWI_start+0x10>
}
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <TWI_stop>:

void TWI_stop(void)
{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    343a:	ec eb       	ldi	r30, 0xBC	; 188
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	84 e9       	ldi	r24, 0x94	; 148
    3440:	80 83       	st	Z, r24
}
    3442:	cf 91       	pop	r28
    3444:	df 91       	pop	r29
    3446:	08 95       	ret

00003448 <TWI_writeByte>:


/* write cmd
 * Function to Send Slave Address for Write operation */
void TWI_writeByte(uint8 data)
{
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	0f 92       	push	r0
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3454:	eb eb       	ldi	r30, 0xBB	; 187
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    345c:	ec eb       	ldi	r30, 0xBC	; 188
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	84 e8       	ldi	r24, 0x84	; 132
    3462:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3464:	ec eb       	ldi	r30, 0xBC	; 188
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	88 23       	and	r24, r24
    346c:	dc f7       	brge	.-10     	; 0x3464 <TWI_writeByte+0x1c>
}
    346e:	0f 90       	pop	r0
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    347e:	ec eb       	ldi	r30, 0xBC	; 188
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	84 ec       	ldi	r24, 0xC4	; 196
    3484:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3486:	ec eb       	ldi	r30, 0xBC	; 188
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	88 23       	and	r24, r24
    348e:	dc f7       	brge	.-10     	; 0x3486 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3490:	eb eb       	ldi	r30, 0xBB	; 187
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
}
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    34a4:	ec eb       	ldi	r30, 0xBC	; 188
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	84 e8       	ldi	r24, 0x84	; 132
    34aa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    34ac:	ec eb       	ldi	r30, 0xBC	; 188
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	88 23       	and	r24, r24
    34b4:	dc f7       	brge	.-10     	; 0x34ac <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    34b6:	eb eb       	ldi	r30, 0xBB	; 187
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
}
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	0f 92       	push	r0
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    34cc:	e9 eb       	ldi	r30, 0xB9	; 185
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	88 7f       	andi	r24, 0xF8	; 248
    34d4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    34d8:	0f 90       	pop	r0
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <UART_init>:
/*
 * Description :
 * Functional responsible for Initialize the UART device.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <UART_init+0x6>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <UART_init+0x8>
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	9c 83       	std	Y+4, r25	; 0x04
    34ee:	8b 83       	std	Y+3, r24	; 0x03
	// Bluetooth pins as output and input
	DDRD |= ( 1 << Tx);
    34f0:	aa e2       	ldi	r26, 0x2A	; 42
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	ea e2       	ldi	r30, 0x2A	; 42
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	82 60       	ori	r24, 0x02	; 2
    34fc:	8c 93       	st	X, r24
	DDRD &=~ (1 <<Rx);
    34fe:	aa e2       	ldi	r26, 0x2A	; 42
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ea e2       	ldi	r30, 0x2A	; 42
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	8e 7f       	andi	r24, 0xFE	; 254
    350a:	8c 93       	st	X, r24

	uint16 ubrr_value = 0;
    350c:	1a 82       	std	Y+2, r1	; 0x02
    350e:	19 82       	std	Y+1, r1	; 0x01

	/************************** UCSR0B Description **************************
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    3510:	e1 ec       	ldi	r30, 0xC1	; 193
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	88 e1       	ldi	r24, 0x18	; 24
    3516:	80 83       	st	Z, r24
	 * The value of Config_Ptr->parity should be one of the following values:
	 * 0: No parity
	 * 1: Even parity
	 * 2: Odd parity
	 */
	UCSR0C = ( UCSR0C & 0xCF ) | ( (Config_Ptr->parity) << 4);
    3518:	a2 ec       	ldi	r26, 0xC2	; 194
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e2 ec       	ldi	r30, 0xC2	; 194
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	28 2f       	mov	r18, r24
    3524:	2f 7c       	andi	r18, 0xCF	; 207
    3526:	eb 81       	ldd	r30, Y+3	; 0x03
    3528:	fc 81       	ldd	r31, Y+4	; 0x04
    352a:	81 81       	ldd	r24, Z+1	; 0x01
    352c:	88 2f       	mov	r24, r24
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	82 95       	swap	r24
    3532:	92 95       	swap	r25
    3534:	90 7f       	andi	r25, 0xF0	; 240
    3536:	98 27       	eor	r25, r24
    3538:	80 7f       	andi	r24, 0xF0	; 240
    353a:	98 27       	eor	r25, r24
    353c:	82 2b       	or	r24, r18
    353e:	8c 93       	st	X, r24
	 * Configuring the number of stop bits:
	 * By clearing the USBS0 bit in the register by ANDing it with the complement of (1<<USBS0),
	 * and then setting the bit to the desired value by ORing it with ((Config_Ptr->stop_bit) << USBS0).
	 * The value of Config_Ptr->stop_bit should be either 0 or 1.
	 */
	UCSR0C = (UCSR0C & ~(1<<USBS0)) | ((Config_Ptr->stop_bit) << USBS0);
    3540:	a2 ec       	ldi	r26, 0xC2	; 194
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e2 ec       	ldi	r30, 0xC2	; 194
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	28 2f       	mov	r18, r24
    354c:	27 7f       	andi	r18, 0xF7	; 247
    354e:	eb 81       	ldd	r30, Y+3	; 0x03
    3550:	fc 81       	ldd	r31, Y+4	; 0x04
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	88 0f       	add	r24, r24
    355e:	99 1f       	adc	r25, r25
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	82 2b       	or	r24, r18
    3566:	8c 93       	st	X, r24
	 * Configuring the data frame size:
	 * By clearing these two bits by ANDing the register with the complement of (3<<UCSZ00),
	 * and then setting the bits to the desired value by ORing it with (((Config_Ptr->bit_data) & 0x03) << UCSZ00).
	 * The value of Config_Ptr->bit_data should be a number between 5 and 8.
	 */
	UCSR0C = (UCSR0C & ~(3<<UCSZ00)) | (((Config_Ptr->bit_data) & 0x03) << UCSZ00);
    3568:	a2 ec       	ldi	r26, 0xC2	; 194
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	e2 ec       	ldi	r30, 0xC2	; 194
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	28 2f       	mov	r18, r24
    3574:	29 7f       	andi	r18, 0xF9	; 249
    3576:	eb 81       	ldd	r30, Y+3	; 0x03
    3578:	fc 81       	ldd	r31, Y+4	; 0x04
    357a:	80 81       	ld	r24, Z
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	83 70       	andi	r24, 0x03	; 3
    3582:	90 70       	andi	r25, 0x00	; 0
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	82 2b       	or	r24, r18
    358a:	8c 93       	st	X, r24
	 * configuring the optional ninth data bit:
	 *  By clearing the UCSZ02 bit by ANDing the register with the complement of (1<<UCSZ02),
	 *  and then setting the bit to the desired value by ORing it with (((Config_Ptr->bit_data) & 0x04) << UCSZ02).
	 *  If Config_Ptr->bit_data is set to 9, then the ninth data bit will be transmitted, otherwise it will be ignored.
	 */
	UCSR0B = (UCSR0B & ~(1<<UCSZ02)) | (((Config_Ptr->bit_data) & 0x04) << UCSZ02);
    358c:	a1 ec       	ldi	r26, 0xC1	; 193
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e1 ec       	ldi	r30, 0xC1	; 193
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	28 2f       	mov	r18, r24
    3598:	2b 7f       	andi	r18, 0xFB	; 251
    359a:	eb 81       	ldd	r30, Y+3	; 0x03
    359c:	fc 81       	ldd	r31, Y+4	; 0x04
    359e:	80 81       	ld	r24, Z
    35a0:	88 2f       	mov	r24, r24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	84 70       	andi	r24, 0x04	; 4
    35a6:	90 70       	andi	r25, 0x00	; 0
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	82 2b       	or	r24, r18
    35b2:	8c 93       	st	X, r24

	ubrr_value = (uint16)((Freq_CPU/(16*(Config_Ptr->baud_rate))) - 1);
    35b4:	eb 81       	ldd	r30, Y+3	; 0x03
    35b6:	fc 81       	ldd	r31, Y+4	; 0x04
    35b8:	83 81       	ldd	r24, Z+3	; 0x03
    35ba:	94 81       	ldd	r25, Z+4	; 0x04
    35bc:	a5 81       	ldd	r26, Z+5	; 0x05
    35be:	b6 81       	ldd	r27, Z+6	; 0x06
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	aa 1f       	adc	r26, r26
    35c6:	bb 1f       	adc	r27, r27
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	aa 1f       	adc	r26, r26
    35ce:	bb 1f       	adc	r27, r27
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	aa 1f       	adc	r26, r26
    35d6:	bb 1f       	adc	r27, r27
    35d8:	88 0f       	add	r24, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	aa 1f       	adc	r26, r26
    35de:	bb 1f       	adc	r27, r27
    35e0:	9c 01       	movw	r18, r24
    35e2:	ad 01       	movw	r20, r26
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	94 e2       	ldi	r25, 0x24	; 36
    35e8:	a4 ef       	ldi	r26, 0xF4	; 244
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__udivmodsi4>
    35f4:	da 01       	movw	r26, r20
    35f6:	c9 01       	movw	r24, r18
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	UBRR0H = ubrr_value >> 8;
    35fe:	e5 ec       	ldi	r30, 0xC5	; 197
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	89 2f       	mov	r24, r25
    3608:	99 27       	eor	r25, r25
    360a:	80 83       	st	Z, r24
	UBRR0L = ubrr_value;
    360c:	e4 ec       	ldi	r30, 0xC4	; 196
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	80 83       	st	Z, r24
}
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	0f 92       	push	r0
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSR0A,UDRE0)){}
    362e:	e0 ec       	ldi	r30, 0xC0	; 192
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	88 2f       	mov	r24, r24
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	80 72       	andi	r24, 0x20	; 32
    363a:	90 70       	andi	r25, 0x00	; 0
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	b9 f3       	breq	.-18     	; 0x362e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR0 = data;
    3640:	e6 ec       	ldi	r30, 0xC6	; 198
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	80 83       	st	Z, r24
}
    3648:	0f 90       	pop	r0
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSR0A,RXC0)){}
    3658:	e0 ec       	ldi	r30, 0xC0	; 192
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	88 23       	and	r24, r24
    3660:	dc f7       	brge	.-10     	; 0x3658 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR0)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR0;
    3662:	e6 ec       	ldi	r30, 0xC6	; 198
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
}
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	08 95       	ret

0000366e <__mulsi3>:
    366e:	62 9f       	mul	r22, r18
    3670:	d0 01       	movw	r26, r0
    3672:	73 9f       	mul	r23, r19
    3674:	f0 01       	movw	r30, r0
    3676:	82 9f       	mul	r24, r18
    3678:	e0 0d       	add	r30, r0
    367a:	f1 1d       	adc	r31, r1
    367c:	64 9f       	mul	r22, r20
    367e:	e0 0d       	add	r30, r0
    3680:	f1 1d       	adc	r31, r1
    3682:	92 9f       	mul	r25, r18
    3684:	f0 0d       	add	r31, r0
    3686:	83 9f       	mul	r24, r19
    3688:	f0 0d       	add	r31, r0
    368a:	74 9f       	mul	r23, r20
    368c:	f0 0d       	add	r31, r0
    368e:	65 9f       	mul	r22, r21
    3690:	f0 0d       	add	r31, r0
    3692:	99 27       	eor	r25, r25
    3694:	72 9f       	mul	r23, r18
    3696:	b0 0d       	add	r27, r0
    3698:	e1 1d       	adc	r30, r1
    369a:	f9 1f       	adc	r31, r25
    369c:	63 9f       	mul	r22, r19
    369e:	b0 0d       	add	r27, r0
    36a0:	e1 1d       	adc	r30, r1
    36a2:	f9 1f       	adc	r31, r25
    36a4:	bd 01       	movw	r22, r26
    36a6:	cf 01       	movw	r24, r30
    36a8:	11 24       	eor	r1, r1
    36aa:	08 95       	ret

000036ac <__udivmodsi4>:
    36ac:	a1 e2       	ldi	r26, 0x21	; 33
    36ae:	1a 2e       	mov	r1, r26
    36b0:	aa 1b       	sub	r26, r26
    36b2:	bb 1b       	sub	r27, r27
    36b4:	fd 01       	movw	r30, r26
    36b6:	0d c0       	rjmp	.+26     	; 0x36d2 <__udivmodsi4_ep>

000036b8 <__udivmodsi4_loop>:
    36b8:	aa 1f       	adc	r26, r26
    36ba:	bb 1f       	adc	r27, r27
    36bc:	ee 1f       	adc	r30, r30
    36be:	ff 1f       	adc	r31, r31
    36c0:	a2 17       	cp	r26, r18
    36c2:	b3 07       	cpc	r27, r19
    36c4:	e4 07       	cpc	r30, r20
    36c6:	f5 07       	cpc	r31, r21
    36c8:	20 f0       	brcs	.+8      	; 0x36d2 <__udivmodsi4_ep>
    36ca:	a2 1b       	sub	r26, r18
    36cc:	b3 0b       	sbc	r27, r19
    36ce:	e4 0b       	sbc	r30, r20
    36d0:	f5 0b       	sbc	r31, r21

000036d2 <__udivmodsi4_ep>:
    36d2:	66 1f       	adc	r22, r22
    36d4:	77 1f       	adc	r23, r23
    36d6:	88 1f       	adc	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	1a 94       	dec	r1
    36dc:	69 f7       	brne	.-38     	; 0x36b8 <__udivmodsi4_loop>
    36de:	60 95       	com	r22
    36e0:	70 95       	com	r23
    36e2:	80 95       	com	r24
    36e4:	90 95       	com	r25
    36e6:	9b 01       	movw	r18, r22
    36e8:	ac 01       	movw	r20, r24
    36ea:	bd 01       	movw	r22, r26
    36ec:	cf 01       	movw	r24, r30
    36ee:	08 95       	ret

000036f0 <__prologue_saves__>:
    36f0:	2f 92       	push	r2
    36f2:	3f 92       	push	r3
    36f4:	4f 92       	push	r4
    36f6:	5f 92       	push	r5
    36f8:	6f 92       	push	r6
    36fa:	7f 92       	push	r7
    36fc:	8f 92       	push	r8
    36fe:	9f 92       	push	r9
    3700:	af 92       	push	r10
    3702:	bf 92       	push	r11
    3704:	cf 92       	push	r12
    3706:	df 92       	push	r13
    3708:	ef 92       	push	r14
    370a:	ff 92       	push	r15
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	ca 1b       	sub	r28, r26
    371a:	db 0b       	sbc	r29, r27
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	09 94       	ijmp

00003728 <__epilogue_restores__>:
    3728:	2a 88       	ldd	r2, Y+18	; 0x12
    372a:	39 88       	ldd	r3, Y+17	; 0x11
    372c:	48 88       	ldd	r4, Y+16	; 0x10
    372e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3730:	6e 84       	ldd	r6, Y+14	; 0x0e
    3732:	7d 84       	ldd	r7, Y+13	; 0x0d
    3734:	8c 84       	ldd	r8, Y+12	; 0x0c
    3736:	9b 84       	ldd	r9, Y+11	; 0x0b
    3738:	aa 84       	ldd	r10, Y+10	; 0x0a
    373a:	b9 84       	ldd	r11, Y+9	; 0x09
    373c:	c8 84       	ldd	r12, Y+8	; 0x08
    373e:	df 80       	ldd	r13, Y+7	; 0x07
    3740:	ee 80       	ldd	r14, Y+6	; 0x06
    3742:	fd 80       	ldd	r15, Y+5	; 0x05
    3744:	0c 81       	ldd	r16, Y+4	; 0x04
    3746:	1b 81       	ldd	r17, Y+3	; 0x03
    3748:	aa 81       	ldd	r26, Y+2	; 0x02
    374a:	b9 81       	ldd	r27, Y+1	; 0x01
    374c:	ce 0f       	add	r28, r30
    374e:	d1 1d       	adc	r29, r1
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	ed 01       	movw	r28, r26
    375c:	08 95       	ret

0000375e <itoa>:
    375e:	fb 01       	movw	r30, r22
    3760:	9f 01       	movw	r18, r30
    3762:	e8 94       	clt
    3764:	42 30       	cpi	r20, 0x02	; 2
    3766:	c4 f0       	brlt	.+48     	; 0x3798 <itoa+0x3a>
    3768:	45 32       	cpi	r20, 0x25	; 37
    376a:	b4 f4       	brge	.+44     	; 0x3798 <itoa+0x3a>
    376c:	4a 30       	cpi	r20, 0x0A	; 10
    376e:	29 f4       	brne	.+10     	; 0x377a <itoa+0x1c>
    3770:	97 fb       	bst	r25, 7
    3772:	1e f4       	brtc	.+6      	; 0x377a <itoa+0x1c>
    3774:	90 95       	com	r25
    3776:	81 95       	neg	r24
    3778:	9f 4f       	sbci	r25, 0xFF	; 255
    377a:	64 2f       	mov	r22, r20
    377c:	77 27       	eor	r23, r23
    377e:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__udivmodhi4>
    3782:	80 5d       	subi	r24, 0xD0	; 208
    3784:	8a 33       	cpi	r24, 0x3A	; 58
    3786:	0c f0       	brlt	.+2      	; 0x378a <itoa+0x2c>
    3788:	89 5d       	subi	r24, 0xD9	; 217
    378a:	81 93       	st	Z+, r24
    378c:	cb 01       	movw	r24, r22
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	a1 f7       	brne	.-24     	; 0x377a <itoa+0x1c>
    3792:	16 f4       	brtc	.+4      	; 0x3798 <itoa+0x3a>
    3794:	5d e2       	ldi	r21, 0x2D	; 45
    3796:	51 93       	st	Z+, r21
    3798:	10 82       	st	Z, r1
    379a:	c9 01       	movw	r24, r18
    379c:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <strrev>

000037a0 <strrev>:
    37a0:	dc 01       	movw	r26, r24
    37a2:	fc 01       	movw	r30, r24
    37a4:	67 2f       	mov	r22, r23
    37a6:	71 91       	ld	r23, Z+
    37a8:	77 23       	and	r23, r23
    37aa:	e1 f7       	brne	.-8      	; 0x37a4 <strrev+0x4>
    37ac:	32 97       	sbiw	r30, 0x02	; 2
    37ae:	04 c0       	rjmp	.+8      	; 0x37b8 <strrev+0x18>
    37b0:	7c 91       	ld	r23, X
    37b2:	6d 93       	st	X+, r22
    37b4:	70 83       	st	Z, r23
    37b6:	62 91       	ld	r22, -Z
    37b8:	ae 17       	cp	r26, r30
    37ba:	bf 07       	cpc	r27, r31
    37bc:	c8 f3       	brcs	.-14     	; 0x37b0 <strrev+0x10>
    37be:	08 95       	ret

000037c0 <__udivmodhi4>:
    37c0:	aa 1b       	sub	r26, r26
    37c2:	bb 1b       	sub	r27, r27
    37c4:	51 e1       	ldi	r21, 0x11	; 17
    37c6:	07 c0       	rjmp	.+14     	; 0x37d6 <__udivmodhi4_ep>

000037c8 <__udivmodhi4_loop>:
    37c8:	aa 1f       	adc	r26, r26
    37ca:	bb 1f       	adc	r27, r27
    37cc:	a6 17       	cp	r26, r22
    37ce:	b7 07       	cpc	r27, r23
    37d0:	10 f0       	brcs	.+4      	; 0x37d6 <__udivmodhi4_ep>
    37d2:	a6 1b       	sub	r26, r22
    37d4:	b7 0b       	sbc	r27, r23

000037d6 <__udivmodhi4_ep>:
    37d6:	88 1f       	adc	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	5a 95       	dec	r21
    37dc:	a9 f7       	brne	.-22     	; 0x37c8 <__udivmodhi4_loop>
    37de:	80 95       	com	r24
    37e0:	90 95       	com	r25
    37e2:	bc 01       	movw	r22, r24
    37e4:	cd 01       	movw	r24, r26
    37e6:	08 95       	ret

000037e8 <_exit>:
    37e8:	f8 94       	cli

000037ea <__stop_program>:
    37ea:	ff cf       	rjmp	.-2      	; 0x37ea <__stop_program>
